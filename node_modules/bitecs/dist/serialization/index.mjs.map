{
  "version": 3,
  "sources": ["../../src/serialization/SoASerializer.ts", "../../src/serialization/SnapshotSerializer.ts", "../../src/serialization/ObserverSerializer.ts"],
  "sourcesContent": ["\n/**\n * Symbols representing different data types for serialization.\n */\nexport const $u8 = Symbol.for('bitecs-u8'), $i8 = Symbol.for('bitecs-i8'), $u16 = Symbol.for('bitecs-u16'), $i16 = Symbol.for('bitecs-i16'),\n    $u32 = Symbol.for('bitecs-u32'), $i32 = Symbol.for('bitecs-i32'), $f32 = Symbol.for('bitecs-f32'), $f64 = Symbol.for('bitecs-f64')\n\n/**\n * Union type of all possible TypedArray types.\n */\nexport type TypedArray = \n    | Int8Array\n    | Uint8Array\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Float32Array\n    | Float64Array\n\n/**\n * Union type of all possible type symbols.\n */\nexport type TypeSymbol = typeof $u8 | typeof $i8 | typeof $u16 | typeof $i16 | typeof $u32 | typeof $i32 | typeof $f32 | typeof $f64\n\n/**\n * Type representing a primitive brand, which is either a number array with a symbol property or a TypedArray.\n */\nexport type PrimitiveBrand = (number[] & { [key: symbol]: true }) | TypedArray\n\n/**\n * Type representing a component reference, which is a record mapping string keys to either\n * a PrimitiveBrand (number array with type symbol) or TypedArray values.\n * Used to define the structure of components that can be serialized.\n */\ntype ComponentRef = Record<string, PrimitiveBrand | TypedArray>\n\n/**\n * Creates a function that tags an array with a type symbol for serialization.\n * @param {TypeSymbol} symbol - The type symbol to tag the array with.\n * @returns {Function} A function that tags an array with the given type symbol.\n */\nconst typeTagForSerialization = (symbol: TypeSymbol) => (a: number[] = []): PrimitiveBrand => \n    Object.defineProperty(a, symbol, { value: true, enumerable: false, writable: false, configurable: false }) as PrimitiveBrand\n\n/**\n * Functions to create arrays tagged with specific type symbols.\n */\nexport const u8 = typeTagForSerialization($u8),     i8 = typeTagForSerialization($i8),\n            u16 = typeTagForSerialization($u16),    i16 = typeTagForSerialization($i16),\n            u32 = typeTagForSerialization($u32),    i32 = typeTagForSerialization($i32),\n            f32 = typeTagForSerialization($f32),    f64 = typeTagForSerialization($f64)\n\n/**\n * Object containing setter functions for each data type.\n */\nconst typeSetters = {\n    [$u8]: (view: DataView, offset: number, value: number) => { view.setUint8(offset, value); return 1; },\n    [$i8]: (view: DataView, offset: number, value: number) => { view.setInt8(offset, value); return 1; },\n    [$u16]: (view: DataView, offset: number, value: number) => { view.setUint16(offset, value); return 2; },\n    [$i16]: (view: DataView, offset: number, value: number) => { view.setInt16(offset, value); return 2; },\n    [$u32]: (view: DataView, offset: number, value: number) => { view.setUint32(offset, value); return 4; },\n    [$i32]: (view: DataView, offset: number, value: number) => { view.setInt32(offset, value); return 4; },\n    [$f32]: (view: DataView, offset: number, value: number) => { view.setFloat32(offset, value); return 4; },\n    [$f64]: (view: DataView, offset: number, value: number) => { view.setFloat64(offset, value); return 8; }\n}\n\n/**\n * Object containing getter functions for each data type.\n */\nconst typeGetters = {\n    [$u8]: (view: DataView, offset: number) => ({ value: view.getUint8(offset), size: 1 }),\n    [$i8]: (view: DataView, offset: number) => ({ value: view.getInt8(offset), size: 1 }),\n    [$u16]: (view: DataView, offset: number) => ({ value: view.getUint16(offset), size: 2 }),\n    [$i16]: (view: DataView, offset: number) => ({ value: view.getInt16(offset), size: 2 }),\n    [$u32]: (view: DataView, offset: number) => ({ value: view.getUint32(offset), size: 4 }),\n    [$i32]: (view: DataView, offset: number) => ({ value: view.getInt32(offset), size: 4 }),\n    [$f32]: (view: DataView, offset: number) => ({ value: view.getFloat32(offset), size: 4 }),\n    [$f64]: (view: DataView, offset: number) => ({ value: view.getFloat64(offset), size: 8 })\n}\n\n/**\n * Checks if a value is a TypedArray or branded array\n */\nfunction isTypedArrayOrBranded(arr: any): arr is PrimitiveBrand | TypedArray {\n    return arr && (\n        ArrayBuffer.isView(arr) || \n        (Array.isArray(arr) && typeof arr === 'object')\n    )\n}\n\n/**\n * Gets the type symbol for an array\n */\nfunction getTypeForArray(arr: PrimitiveBrand | TypedArray): TypeSymbol {\n    // Check for branded arrays first\n    for (const symbol of [$u8, $i8, $u16, $i16, $u32, $i32, $f32, $f64] as TypeSymbol[]) {\n        if (symbol in arr) return symbol\n    }\n    // Then check TypedArrays\n    if (arr instanceof Int8Array) return $i8\n    if (arr instanceof Uint8Array) return $u8\n    if (arr instanceof Int16Array) return $i16\n    if (arr instanceof Uint16Array) return $u16\n    if (arr instanceof Int32Array) return $i32\n    if (arr instanceof Uint32Array) return $u32\n    if (arr instanceof Float32Array) return $f32\n    return $f64\n}\n\n/**\n * Creates a serializer function for a component.\n * @param {ComponentRef} component - The component to create a serializer for.\n * @returns {Function} A function that serializes the component.\n */\nexport const createComponentSerializer = (component: ComponentRef | PrimitiveBrand | TypedArray) => {\n    // Handle direct array case\n    if (isTypedArrayOrBranded(component)) {\n        const type = getTypeForArray(component)\n        const setter = typeSetters[type]\n        return (view: DataView, offset: number, index: number) => {\n            let bytesWritten = 0\n            bytesWritten += typeSetters[$u32](view, offset, index)\n            bytesWritten += setter(view, offset + bytesWritten, component[index])\n            return bytesWritten\n        }\n    }\n\n    // Handle component case\n    const props = Object.keys(component)\n    const types = props.map(prop => {\n        const arr = component[prop]\n        if (!isTypedArrayOrBranded(arr)) {\n            throw new Error(`Invalid array type for property ${prop}`)\n        }\n        return getTypeForArray(arr)\n    })\n    const setters = types.map(type => typeSetters[type as keyof typeof typeSetters] || (() => { throw new Error(`Unsupported or unannotated type`); }))\n    return (view: DataView, offset: number, index: number) => {\n        let bytesWritten = 0\n        // Write index first\n        bytesWritten += typeSetters[$u32](view, offset + bytesWritten, index)\n        for (let i = 0; i < props.length; i++) {\n            bytesWritten += setters[i](view, offset + bytesWritten, component[props[i]][index])\n        }\n        return bytesWritten\n    }\n}\n\n/**\n * Creates a deserializer function for a component.\n * @param {ComponentRef} component - The component to create a deserializer for.\n * @returns {Function} A function that deserializes the component.\n */\nexport const createComponentDeserializer = (component: ComponentRef | PrimitiveBrand | TypedArray) => {\n    // Handle direct array case\n    if (isTypedArrayOrBranded(component)) {\n        const type = getTypeForArray(component)\n        const getter = typeGetters[type]\n        return (view: DataView, offset: number, entityIdMapping?: Map<number, number>) => {\n            let bytesRead = 0\n            const { value: originalIndex, size: indexSize } = typeGetters[$u32](view, offset)\n            bytesRead += indexSize\n            const index = entityIdMapping ? entityIdMapping.get(originalIndex) ?? originalIndex : originalIndex\n            const { value, size } = getter(view, offset + bytesRead)\n            component[index] = value\n            return bytesRead + size\n        }\n    }\n\n    // Handle component case\n    const props = Object.keys(component)\n    const types = props.map(prop => {\n        const arr = component[prop]\n        if (!isTypedArrayOrBranded(arr)) {\n            throw new Error(`Invalid array type for property ${prop}`)\n        }\n        return getTypeForArray(arr)\n    })\n    const getters = types.map(type => typeGetters[type as keyof typeof typeGetters] || (() => { throw new Error(`Unsupported or unannotated type`); }))\n    return (view: DataView, offset: number, entityIdMapping?: Map<number, number>) => {\n        let bytesRead = 0\n\n        const { value: originalIndex, size: indexSize } = typeGetters[$u32](view, offset + bytesRead)\n        bytesRead += indexSize\n        \n        const index = entityIdMapping ? entityIdMapping.get(originalIndex) ?? originalIndex : originalIndex\n        \n        for (let i = 0; i < props.length; i++) {\n            const { value, size } = getters[i](view, offset + bytesRead)\n            component[props[i]][index] = value\n            bytesRead += size\n        }\n        return bytesRead\n    }\n}\n\n/**\n * Creates a serializer function for Structure of Arrays (SoA) data.\n * @param {ComponentRef[]} components - The components to serialize.\n * @param {ArrayBuffer} [buffer] - The buffer to use for serialization.\n * @returns {Function} A function that serializes the SoA data.\n */\nexport const createSoASerializer = (components: (ComponentRef | PrimitiveBrand | TypedArray)[], buffer: ArrayBuffer = new ArrayBuffer(1024 * 1024 * 100)) => {\n    const view = new DataView(buffer)\n    const componentSerializers = components.map(createComponentSerializer)\n    return (indices: number[] | readonly number[]): ArrayBuffer => {\n        let offset = 0\n        for (let i = 0; i < indices.length; i++) {\n            const index = indices[i]\n            for (let j = 0; j < componentSerializers.length; j++) {\n                offset += componentSerializers[j](view, offset, index)\n            }\n        }\n        return buffer.slice(0, offset)\n    }\n}\n\n/**\n * Creates a deserializer function for Structure of Arrays (SoA) data.\n * @param {ComponentRef[]} components - The components to deserialize.\n * @returns {Function} A function that deserializes the SoA data.\n */\nexport const createSoADeserializer = (components: (ComponentRef | PrimitiveBrand | TypedArray)[]) => {\n    const componentDeserializers = components.map(createComponentDeserializer)\n    return (packet: ArrayBuffer, entityIdMapping?: Map<number, number>): void => {\n        const view = new DataView(packet)\n        let offset = 0\n        while (offset < packet.byteLength) {\n            for (let i = 0; i < componentDeserializers.length; i++) {\n                offset += componentDeserializers[i](view, offset, entityIdMapping)\n            }\n        }\n    }\n}\n", "import { createSoASerializer, createSoADeserializer, PrimitiveBrand } from './SoASerializer'\nimport {\n    addComponent,\n    hasComponent,\n    World,\n    getAllEntities,\n    addEntity,\n    isRelation,\n    getRelationTargets,\n    Wildcard,\n    Relation,\n    ComponentRef,\n    query\n} from 'bitecs'\nimport { $u8, $i8, $u16, $i16, $u32, $i32, $f32 } from './SoASerializer'\nquery\n/**\n * Serializes relation data for a specific entity\n */\nfunction serializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\n    if (!data) return offset\n    \n    // Handle array data (AoS) - defaults to f64\n    if (Array.isArray(data)) {\n        const value = data[eid]\n        if (value !== undefined) {\n            dataView.setFloat64(offset, value)\n            return offset + 8\n        }\n        return offset\n    }\n    \n    // Handle object data (SoA)\n    if (typeof data === 'object') {\n        const keys = Object.keys(data).sort()\n        for (const key of keys) {\n            const arr = data[key]\n            const value = arr[eid]\n            \n            if (value !== undefined) {\n                if (arr instanceof Int8Array || $i8 in arr) {\n                    dataView.setInt8(offset, value)\n                    offset += 1\n                } else if (arr instanceof Uint8Array || $u8 in arr) {\n                    dataView.setUint8(offset, value)\n                    offset += 1\n                } else if (arr instanceof Int16Array || $i16 in arr) {\n                    dataView.setInt16(offset, value)\n                    offset += 2\n                } else if (arr instanceof Uint16Array || $u16 in arr) {\n                    dataView.setUint16(offset, value)\n                    offset += 2\n                } else if (arr instanceof Int32Array || $i32 in arr) {\n                    dataView.setInt32(offset, value)\n                    offset += 4\n                } else if (arr instanceof Uint32Array || $u32 in arr) {\n                    dataView.setUint32(offset, value)\n                    offset += 4\n                } else if (arr instanceof Float32Array || $f32 in arr) {\n                    dataView.setFloat32(offset, value)\n                    offset += 4\n                } else {\n                    // Default to f64\n                    dataView.setFloat64(offset, value)\n                    offset += 8\n                }\n            }\n        }\n    }\n    \n    return offset\n}\n\n/**\n * Deserializes relation data for a specific entity\n */\nfunction deserializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\n    if (!data) return offset\n    \n    // Handle array data (AoS) - defaults to f64\n    if (Array.isArray(data)) {\n        data[eid] = dataView.getFloat64(offset)\n        return offset + 8\n    }\n    \n    // Handle object data (SoA)\n    if (typeof data === 'object') {\n        const keys = Object.keys(data).sort()\n        for (const key of keys) {\n            const arr = data[key]\n            \n            if (arr instanceof Int8Array || $i8 in arr) {\n                arr[eid] = dataView.getInt8(offset)\n                offset += 1\n            } else if (arr instanceof Uint8Array || $u8 in arr) {\n                arr[eid] = dataView.getUint8(offset)\n                offset += 1\n            } else if (arr instanceof Int16Array || $i16 in arr) {\n                arr[eid] = dataView.getInt16(offset)\n                offset += 2\n            } else if (arr instanceof Uint16Array || $u16 in arr) {\n                arr[eid] = dataView.getUint16(offset)\n                offset += 2\n            } else if (arr instanceof Int32Array || $i32 in arr) {\n                arr[eid] = dataView.getInt32(offset)\n                offset += 4\n            } else if (arr instanceof Uint32Array || $u32 in arr) {\n                arr[eid] = dataView.getUint32(offset)\n                offset += 4\n            } else if (arr instanceof Float32Array || $f32 in arr) {\n                arr[eid] = dataView.getFloat32(offset)\n                offset += 4\n            } else {\n                // Default to f64\n                arr[eid] = dataView.getFloat64(offset)\n                offset += 8\n            }\n        }\n    }\n    \n    return offset\n}\n\n/**\n * Creates a snapshot serializer for the given world and components.\n * @param {World} world - The ECS world object.\n * @param {Record<string, PrimitiveBrand>[]} components - An array of component definitions.\n * @param {ArrayBuffer} [buffer=new ArrayBuffer(1024 * 1024 * 100)] - The buffer to use for serialization.\n * @returns {Function} A function that, when called, serializes the world state and returns a slice of the buffer.\n */\nexport const createSnapshotSerializer = (world: World, components: (Record<string, PrimitiveBrand> | ComponentRef)[], buffer: ArrayBuffer = new ArrayBuffer(1024 * 1024 * 100)) => {\n    const dataView = new DataView(buffer)\n    let offset = 0\n\n    /**\n     * Serializes entity-component relationships.\n     * @param {number[]} entities - An array of entity IDs.\n     */\n    const serializeEntityComponentRelationships = (entities: number[]) => {\n        const entityCount = entities.length\n        \n        // Write entity count\n        dataView.setUint32(offset, entityCount)\n        offset += 4\n\n        // Serialize entity-component relationships\n        for (let i = 0; i < entityCount; i++) {\n            const entityId = entities[i]\n            let componentCount = 0\n            \n            dataView.setUint32(offset, entityId)\n            offset += 4\n            \n            const componentCountOffset = offset\n            offset += 1\n            \n            for (let j = 0; j < components.length; j++) {\n                const component = components[j]\n                if (isRelation(component)) {\n                    const targets = getRelationTargets(world, entityId, component as Relation<any>)\n                    for (const target of targets) {\n                        dataView.setUint8(offset, j)\n                        offset += 1\n                        dataView.setUint32(offset, target)\n                        offset += 4\n                        const relationData = (component as any)(target)\n                        offset = serializeRelationData(relationData, entityId, dataView, offset)\n                        componentCount++\n                    }\n                } else if (hasComponent(world, entityId, component)) {\n                    dataView.setUint8(offset, j)\n                    offset += 1\n                    componentCount++\n                }\n            }\n            \n            dataView.setUint8(componentCountOffset, componentCount)\n        }\n    }\n\n    /**\n     * Serializes component data for all entities.\n     * @param {number[]} entities - An array of entity IDs.\n     */\n    const serializeComponentData = (entities: number[]) => {\n        const soaSerializer = createSoASerializer(components, buffer.slice(offset))\n        const componentData = soaSerializer(entities)\n        new Uint8Array(buffer).set(new Uint8Array(componentData), offset)\n        offset += componentData.byteLength\n    }\n\n    return () => {\n        offset = 0\n        const entities = getAllEntities(world)\n        serializeEntityComponentRelationships(entities)\n        serializeComponentData(entities)\n        return buffer.slice(0, offset)\n    }\n}\n\n/**\n * Creates a snapshot deserializer for the given world and components.\n * @param {World} world - The ECS world object.\n * @param {Record<string, PrimitiveBrand>[]} components - An array of component definitions.\n * @returns {Function} A function that takes a serialized packet and deserializes it into the world, returning a map of packet entity IDs to world entity IDs.\n */\nexport const createSnapshotDeserializer = (world: World, components: (Record<string, PrimitiveBrand> | ComponentRef)[], constructorMapping?: Map<number, number>) => {\n    let entityIdMapping = constructorMapping || new Map<number, number>()\n    const soaDeserializer = createSoADeserializer(components)\n\n    return (packet: ArrayBuffer, overrideMapping?: Map<number, number>): Map<number, number> => {\n        const currentMapping = overrideMapping || entityIdMapping\n        const dataView = new DataView(packet)\n        let offset = 0\n\n        // Read entity count\n        const entityCount = dataView.getUint32(offset)\n        offset += 4\n\n        // Deserialize entity-component relationships\n        for (let entityIndex = 0; entityIndex < entityCount; entityIndex++) {\n            const packetEntityId = dataView.getUint32(offset)\n            offset += 4\n\n            let worldEntityId = currentMapping.get(packetEntityId)\n            if (worldEntityId === undefined) {\n                worldEntityId = addEntity(world)\n                currentMapping.set(packetEntityId, worldEntityId)\n            }\n\n            const componentCount = dataView.getUint8(offset)\n            offset += 1\n\n            for (let i = 0; i < componentCount; i++) {\n                const componentIndex = dataView.getUint8(offset)\n                offset += 1\n                const component = components[componentIndex]\n                \n                if (isRelation(component)) {\n                    const targetId = dataView.getUint32(offset)\n                    offset += 4\n                    let worldTargetId = currentMapping.get(targetId)\n                    if (worldTargetId === undefined) {\n                        worldTargetId = addEntity(world)\n                        currentMapping.set(targetId, worldTargetId)\n                    }\n                    const relationComponent = (component as (target: any) => any)(worldTargetId)\n                    addComponent(world, worldEntityId, relationComponent)\n                    offset = deserializeRelationData(relationComponent, worldEntityId, dataView, offset)\n                } else {\n                    addComponent(world, worldEntityId, component)\n                }\n            }\n        }\n\n        // Deserialize component data\n        soaDeserializer(packet.slice(offset), currentMapping)\n\n        return currentMapping\n    }\n}\n\n\nexport const test = (w:any) => {\n    return w === Wildcard\n}", "import {\n    addComponent,\n    removeComponent,\n    addEntity,\n    removeEntity,\n    observe,\n    onAdd,\n    onRemove,\n    World,\n    ComponentRef,\n    entityExists,\n    isRelation,\n    getRelationTargets,\n    Wildcard,\n    EntityId\n} from 'bitecs'\n\nenum OperationType {\n    AddEntity = 0,\n    RemoveEntity = 1,\n    AddComponent = 2,\n    RemoveComponent = 3,\n    AddRelation = 4,\n    RemoveRelation = 5,\n}\nimport { $u8, $i8, $u16, $i16, $u32, $i32, $f32 } from './SoASerializer'\n\n/**\n * Serializes relation data for a specific entity\n */\nfunction serializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\n    if (!data) return offset\n    \n    // Handle array data (AoS) - defaults to f64\n    if (Array.isArray(data)) {\n        const value = data[eid]\n        if (value !== undefined) {\n            dataView.setFloat64(offset, value)\n            return offset + 8\n        }\n        return offset\n    }\n    \n    // Handle object data (SoA)\n    if (typeof data === 'object') {\n        const keys = Object.keys(data).sort()\n        for (const key of keys) {\n            const arr = data[key]\n            const value = arr[eid]\n            \n            if (value !== undefined) {\n                if (arr instanceof Int8Array || $i8 in arr) {\n                    dataView.setInt8(offset, value)\n                    offset += 1\n                } else if (arr instanceof Uint8Array || $u8 in arr) {\n                    dataView.setUint8(offset, value)\n                    offset += 1\n                } else if (arr instanceof Int16Array || $i16 in arr) {\n                    dataView.setInt16(offset, value)\n                    offset += 2\n                } else if (arr instanceof Uint16Array || $u16 in arr) {\n                    dataView.setUint16(offset, value)\n                    offset += 2\n                } else if (arr instanceof Int32Array || $i32 in arr) {\n                    dataView.setInt32(offset, value)\n                    offset += 4\n                } else if (arr instanceof Uint32Array || $u32 in arr) {\n                    dataView.setUint32(offset, value)\n                    offset += 4\n                } else if (arr instanceof Float32Array || $f32 in arr) {\n                    dataView.setFloat32(offset, value)\n                    offset += 4\n                } else {\n                    // Default to f64\n                    dataView.setFloat64(offset, value)\n                    offset += 8\n                }\n            }\n        }\n    }\n    \n    return offset\n}\n\n/**\n * Deserializes relation data for a specific entity\n */\nfunction deserializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\n    if (!data) return offset\n    \n    // Handle array data (AoS) - defaults to f64\n    if (Array.isArray(data)) {\n        data[eid] = dataView.getFloat64(offset)\n        return offset + 8\n    }\n    \n    // Handle object data (SoA)\n    if (typeof data === 'object') {\n        const keys = Object.keys(data).sort()\n        for (const key of keys) {\n            const arr = data[key]\n            \n            if (arr instanceof Int8Array || $i8 in arr) {\n                arr[eid] = dataView.getInt8(offset)\n                offset += 1\n            } else if (arr instanceof Uint8Array || $u8 in arr) {\n                arr[eid] = dataView.getUint8(offset)\n                offset += 1\n            } else if (arr instanceof Int16Array || $i16 in arr) {\n                arr[eid] = dataView.getInt16(offset)\n                offset += 2\n            } else if (arr instanceof Uint16Array || $u16 in arr) {\n                arr[eid] = dataView.getUint16(offset)\n                offset += 2\n            } else if (arr instanceof Int32Array || $i32 in arr) {\n                arr[eid] = dataView.getInt32(offset)\n                offset += 4\n            } else if (arr instanceof Uint32Array || $u32 in arr) {\n                arr[eid] = dataView.getUint32(offset)\n                offset += 4\n            } else if (arr instanceof Float32Array || $f32 in arr) {\n                arr[eid] = dataView.getFloat32(offset)\n                offset += 4\n            } else {\n                // Default to f64\n                arr[eid] = dataView.getFloat64(offset)\n                offset += 8\n            }\n        }\n    }\n    \n    return offset\n}\n\n/**\n * Creates a serializer for observing and serializing changes in networked entities.\n */\nexport const createObserverSerializer = (world: World, networkedTag: ComponentRef, components: ComponentRef[], buffer = new ArrayBuffer(1024 * 1024 * 100)) => {\n    const dataView = new DataView(buffer)\n    let offset = 0\n    const queue: [number, OperationType, number, number?, any?][] = []\n    const relationTargets = new Map<number, Map<number, Set<number>>>()\n    \n    observe(world, onAdd(networkedTag), (eid: EntityId) => {\n        queue.push([eid, OperationType.AddEntity, -1])\n    })\n\n    observe(world, onRemove(networkedTag), (eid: EntityId) => {\n        queue.push([eid, OperationType.RemoveEntity, -1])\n        relationTargets.delete(eid)\n    })\n\n    components.forEach((component, i) => {\n        if (isRelation(component)) {\n            observe(world, onAdd(networkedTag, component(Wildcard)), (eid: EntityId) => {\n                const targets = getRelationTargets(world, eid, component)\n                for (const target of targets) {\n                    if (!relationTargets.has(eid)) {\n                        relationTargets.set(eid, new Map())\n                    }\n                    if (!relationTargets.get(eid).has(i)) {\n                        relationTargets.get(eid).set(i, new Set())\n                    }\n                    relationTargets.get(eid).get(i).add(target)\n                    const relationData = component(target)\n                    queue.push([eid, OperationType.AddRelation, i, target, relationData])\n                }\n            })\n\n            observe(world, onRemove(networkedTag, component(Wildcard)), (eid: EntityId) => {\n                const targetMap = relationTargets.get(eid)\n                if (targetMap) {\n                    const targets = targetMap.get(i)\n                    if (targets) {\n                        for (const target of targets) {\n                            queue.push([eid, OperationType.RemoveRelation, i, target])\n                        }\n                        targetMap.delete(i)\n                        if (targetMap.size === 0) {\n                            relationTargets.delete(eid)\n                        }\n                    }\n                }\n            })\n        } else {\n            observe(world, onAdd(networkedTag, component), (eid: EntityId) => {\n                queue.push([eid, OperationType.AddComponent, i])\n            })\n\n            observe(world, onRemove(networkedTag, component), (eid: EntityId) => {\n                queue.push([eid, OperationType.RemoveComponent, i])\n            })\n        }\n    })\n    \n    return () => {\n        offset = 0\n        \n        for (let i = 0; i < queue.length; i++) {\n            const [entityId, type, componentId, targetId, relationData] = queue[i]\n            dataView.setUint32(offset, entityId)\n            offset += 4\n            dataView.setUint8(offset, type)\n            offset += 1\n            if (type === OperationType.AddComponent || \n                type === OperationType.RemoveComponent || \n                type === OperationType.AddRelation ||\n                type === OperationType.RemoveRelation) {\n                dataView.setUint8(offset, componentId)\n                offset += 1\n                \n                if (type === OperationType.AddRelation || type === OperationType.RemoveRelation) {\n                    dataView.setUint32(offset, targetId)\n                    offset += 4\n                    \n                    if (type === OperationType.AddRelation && relationData) {\n                        offset = serializeRelationData(relationData, entityId, dataView, offset)\n                    }\n                }\n            }\n        }\n        queue.length = 0\n\n        return buffer.slice(0, offset)\n    }\n}\n\n/**\n * Creates a deserializer for applying serialized changes to a world.\n */\nexport const createObserverDeserializer = (world: World, networkedTag: ComponentRef, components: ComponentRef[], constructorMapping?: Map<number, number>) => {\n    let entityIdMapping = constructorMapping || new Map<number, number>()\n    \n    return (packet: ArrayBuffer, overrideMapping?: Map<number, number>) => {\n        // Allow overriding the mapping for this call\n        const currentMapping = overrideMapping || entityIdMapping\n        const dataView = new DataView(packet)\n        let offset = 0\n\n        while (offset < packet.byteLength) {\n            const packetEntityId = dataView.getUint32(offset)\n            offset += 4\n            const operationType = dataView.getUint8(offset)\n            offset += 1\n            let componentId = -1\n            let targetId = -1\n            \n            if (operationType === OperationType.AddComponent || \n                operationType === OperationType.RemoveComponent ||\n                operationType === OperationType.AddRelation ||\n                operationType === OperationType.RemoveRelation) {\n                componentId = dataView.getUint8(offset)\n                offset += 1\n                \n                if (operationType === OperationType.AddRelation || operationType === OperationType.RemoveRelation) {\n                    targetId = dataView.getUint32(offset)\n                    offset += 4\n                }\n            }\n\n            const component = components[componentId]\n            let worldEntityId = currentMapping.get(packetEntityId)\n\n            if (operationType === OperationType.AddEntity) {\n                if (worldEntityId === undefined) {\n                    worldEntityId = addEntity(world)\n                    currentMapping.set(packetEntityId, worldEntityId)\n                    addComponent(world, worldEntityId, networkedTag)\n                } else {\n                    // TODO: figure out if this should ignore, throw, warn, or if the observer serializer should maybe do a snapshot on first call?\n                    // throw new Error(`Entity with ID ${packetEntityId} already exists in the mapping.`)\n                    console.warn(`Attempted to deserialize addEntity with ID ${packetEntityId}, but it has already been deserialzied and exists in the mapping.`)\n                }\n            } else if (worldEntityId !== undefined && entityExists(world, worldEntityId)) {\n                if (operationType === OperationType.RemoveEntity) {\n                    removeEntity(world, worldEntityId)\n                    currentMapping.delete(packetEntityId)\n                } else if (operationType === OperationType.AddComponent) {\n                    addComponent(world, worldEntityId, component)\n                } else if (operationType === OperationType.RemoveComponent) {\n                    removeComponent(world, worldEntityId, component)\n                } else if (operationType === OperationType.AddRelation) {\n                    const worldTargetId = currentMapping.get(targetId)\n                    if (worldTargetId !== undefined) {\n                        const relationComponent = component(worldTargetId)\n                        addComponent(world, worldEntityId, relationComponent)\n                        offset = deserializeRelationData(relationComponent, worldEntityId, dataView, offset)\n                    }\n                } else if (operationType === OperationType.RemoveRelation) {\n                    const worldTargetId = currentMapping.get(targetId)\n                    if (worldTargetId !== undefined) {\n                        removeComponent(world, worldEntityId, component(worldTargetId))\n                    }\n                }\n            }\n        }\n\n        return currentMapping\n    }\n}\n"],
  "mappings": "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",
  "names": ["addComponent", "addEntity", "isRelation", "getRelationTargets", "Wildcard", "serializeRelationData", "deserializeRelationData", "isRelation", "Wildcard", "getRelationTargets", "addEntity", "addComponent"]
}
