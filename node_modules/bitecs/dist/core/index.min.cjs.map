{
  "version": 3,
  "sources": ["../../src/core/index.ts", "../../src/core/utils/defineHiddenProperty.ts", "../../src/core/EntityIndex.ts", "../../src/core/World.ts", "../../src/core/utils/SparseSet.ts", "../../src/core/utils/Observer.ts", "../../src/core/Query.ts", "../../src/core/Relation.ts", "../../src/core/Component.ts", "../../src/core/Entity.ts", "../../src/core/utils/pipe.ts"],
  "sourcesContent": ["export {\n\tcreateWorld,\n\tresetWorld,\n\tdeleteWorld,\n\tgetWorldComponents,\n\tgetAllEntities,\n\t$internal,\n} from './World'\n\nexport type {\n\tWorld,\n\tInternalWorld,\n\tWorldContext\n} from './World'\n\nexport {\n\ttype EntityId,\n\taddEntity,\n\tremoveEntity,\n\tgetEntityComponents,\n\tentityExists,\n\tPrefab,\n\taddPrefab,\n} from './Entity'\n\nexport { \n\tcreateEntityIndex,\n\tgetId,\n\tgetVersion,\n\twithVersioning,\n} from './EntityIndex'\n\nexport {\n\tregisterComponent,\n\tregisterComponents,\n\thasComponent,\n\taddComponent,\n\taddComponents,\n\tremoveComponent,\n\tremoveComponents,\n\tgetComponentData,\n\tset\n} from './Component'\n\nexport type {\n\tComponentRef,\n\tComponentData\n} from './Component'\n\nexport {\n\tcommitRemovals,\n\tremoveQuery,\n\tregisterQuery,\n\tinnerQuery,\n\tquery,\n\tobserve,\n\tonAdd,\n\tonRemove,\n\tOr,\n\tAnd,\n\tNot,\n\tAny,\n\tAll,\n\tNone,\n\tonGet, \n\tonSet,\n} from './Query'\n\nexport type {\n\tObservableHookDef,\n\tObservableHook,\n\tQueryResult,\n\tQuery,\n\tQueryOperatorType,\n\tOpReturnType,\n\tQueryOperator,\n\tQueryTerm,\n\tOrOp,\n\tAndOp,\n\tNotOp,\n\tAnyOp,\n\tAllOp,\n\tNoneOp,\n} from './Query'\n\nexport { pipe } from './utils/pipe'\n\nexport {\n\twithAutoRemoveSubject,\n\twithOnTargetRemoved,\n\twithStore,\n\tcreateRelation,\n\tgetRelationTargets,\n\tWildcard,\n\tIsA,\n\tPair,\n\tisRelation,\n\tisWildcard,\n} from './Relation'\n\nexport type {\n\tOnTargetRemovedCallback,\n\tRelation,\n\tRelationTarget,\n} from './Relation'\n", "export const defineHiddenProperty = (obj:any,key:any,value:any) => Object.defineProperty(obj, key, {\n    value,\n    enumerable: false,\n    writable: true,\n    configurable: true,\n})\n\nexport const defineHiddenProperties = (obj:any,kv:any) => {\n    const descriptors = {\n        enumerable: false,\n        writable: true,\n        configurable: true,\n    }\n    Object.defineProperties(obj, Reflect.ownKeys(kv).reduce((a,k) => Object.assign(a, {[k]: {value: kv[k], ...descriptors}}), {}))\n}", "/**\n * Represents the structure for managing entity IDs.\n */\nexport type EntityIndex = {\n    /** The number of currently alive entities. */\n    aliveCount: number\n    /** Array of entity IDs, densely packed. */\n    dense: number[]\n    /** Sparse array mapping entity IDs to their index in the dense array. */\n    sparse: number[]\n    /** The highest entity ID that has been assigned. */\n    maxId: number\n    /** Flag indicating if versioning is enabled. */\n    versioning: boolean\n    /** Number of bits used for versioning. */\n    versionBits: number\n    /** Bit mask for entity ID. */\n    entityMask: number\n    /** Bit shift for version. */\n    versionShift: number\n    /** Bit mask for version. */\n    versionMask: number\n}\n\n/**\n * Extracts the entity ID from a versioned entity ID by stripping off the version.\n * @param {EntityIndex} index - The EntityIndex containing the masks.\n * @param {number} id - The versioned entity ID.\n * @returns {number} The entity ID without the version.\n */\nexport const getId = (index: EntityIndex, id: number): number => id & index.entityMask;\n\n/**\n * Extracts the version from an entity ID.\n * @param {EntityIndex} index - The EntityIndex containing the masks and shifts.\n * @param {number} id - The entity ID.\n * @returns {number} The version.\n */\nexport const getVersion = (index: EntityIndex, id: number): number => \n    (id >>> index.versionShift) & ((1 << index.versionBits) - 1);\n\n/**\n * Increments the version of an entity ID.\n * @param {EntityIndex} index - The EntityIndex containing the masks and shifts.\n * @param {number} id - The entity ID.\n * @returns {number} The new entity ID with incremented version.\n */\nexport const incrementVersion = (index: EntityIndex, id: number): number => {\n    const currentVersion = getVersion(index, id);\n    const newVersion = (currentVersion + 1) & ((1 << index.versionBits) - 1);\n    return (id & index.entityMask) | (newVersion << index.versionShift);\n}\n\n/**\n * Creates configuration options for entity ID recycling with versioning.\n * @param {number} [versionBits] - Optional number of bits to use for version numbers. Defaults to 8 if not specified.\n * @returns {object} Configuration object with versioning enabled and specified version bits.\n */\nexport const withVersioning = (versionBits?: number) => ({\n    versioning: true,\n    versionBits\n})\n\n/**\n * Creates and initializes a new EntityIndex.\n * @param {object|function} [options] - Optional configuration object from withVersioning() or withVersioning function.\n * @param {boolean} options.versioning - Flag to enable versioning for recycled IDs.\n * @param {number} options.versionBits - Number of bits to use for versioning (default: 8).\n * @returns {EntityIndex} A new EntityIndex object.\n */\nexport const createEntityIndex = (options?: ReturnType<typeof withVersioning> | typeof withVersioning): EntityIndex => {\n    const config = options \n        ? typeof options === 'function' \n            ? options()\n            : options\n        : { versioning: false, versionBits: 8 }\n\n    const versionBits = config.versionBits ?? 8\n    const versioning = config.versioning ?? false\n    \n    const entityBits = 32 - versionBits\n    const entityMask = (1 << entityBits) - 1\n    const versionShift = entityBits\n    const versionMask = ((1 << versionBits) - 1) << versionShift\n\n    return {\n        aliveCount: 0,\n        dense: [],\n        sparse: [],\n        maxId: 0,\n        versioning,\n        versionBits,\n        entityMask,\n        versionShift,\n        versionMask\n    }\n}\n\n/**\n * Adds a new entity ID to the index or recycles an existing one.\n * @param {EntityIndex} index - The EntityIndex to add to.\n * @returns {number} The new or recycled entity ID.\n */\nexport const addEntityId = (index: EntityIndex): number => {\n    if (index.aliveCount < index.dense.length) {\n        // Recycle id\n        const recycledId = index.dense[index.aliveCount];\n        const entityId = recycledId;\n        index.sparse[entityId] = index.aliveCount;\n        index.aliveCount++;\n        return recycledId;\n    }\n\n    // Create new id\n    const id = ++index.maxId;\n    index.dense.push(id);\n    index.sparse[id] = index.aliveCount;\n    index.aliveCount++;\n\n    return id;\n}\n\n/**\n * Removes an entity ID from the index.\n * @param {EntityIndex} index - The EntityIndex to remove from.\n * @param {number} id - The entity ID to remove.\n */\nexport const removeEntityId = (index: EntityIndex, id: number): void => {\n    const denseIndex = index.sparse[id];\n    if (denseIndex === undefined || denseIndex >= index.aliveCount) {\n        // Entity is not alive or doesn't exist, nothing to be done\n        return;\n    }\n\n    const lastIndex = index.aliveCount - 1;\n    const lastId = index.dense[lastIndex];\n\n    // Swap with the last element\n    index.sparse[lastId] = denseIndex;\n    index.dense[denseIndex] = lastId;\n\n    // Update the removed entity's record\n    index.sparse[id] = lastIndex; // Set to lastIndex instead of undefined\n    index.dense[lastIndex] = id; // Keep the original id, don't strip version\n\n    // Version the ID if enabled\n    if (index.versioning) {\n        const newId = incrementVersion(index, id);\n        index.dense[lastIndex] = newId;\n    }\n\n    index.aliveCount--;\n}\n\n/**\n * Checks if an entity ID is currently alive in the index.\n * @param {EntityIndex} index - The EntityIndex to check.\n * @param {number} id - The entity ID to check.\n * @returns {boolean} True if the entity ID is alive, false otherwise.\n */\nexport const isEntityIdAlive = (index: EntityIndex, id: number): boolean => {\n    const entityId = getId(index, id);\n    const denseIndex = index.sparse[entityId];\n    return denseIndex !== undefined && denseIndex < index.aliveCount && index.dense[denseIndex] === id;\n}\n", "import { defineHiddenProperty } from './utils/defineHiddenProperty'\nimport { createEntityIndex, EntityIndex } from './EntityIndex'\nimport { ComponentRef, ComponentData } from './Component'\nimport { Query } from './Query'\nimport { EntityId } from './Entity'\n\nexport const $internal = Symbol.for('bitecs_internal')\n\nexport type WorldContext = {\n    entityIndex: EntityIndex\n    entityMasks: number[][]\n    entityComponents: Map<EntityId, Set<ComponentRef>>\n    bitflag: number\n    componentMap: Map<ComponentRef, ComponentData>\n    componentCount: number\n    queries: Set<Query>\n    queriesHashMap: Map<string, Query>\n    notQueries: Set<any>\n    dirtyQueries: Set<any>\n    entitiesWithRelations: Set<EntityId>\n}\n\nexport type InternalWorld = {\n    [$internal]: WorldContext\n}\n\nexport type World<T extends object = {}> = { [K in keyof T]: T[K] }\n\nconst createBaseWorld = <T extends object>(context?: T, entityIndex?: EntityIndex): World<T> => \n    defineHiddenProperty(context || {} as T, $internal, {\n        entityIndex: entityIndex || createEntityIndex(),\n        entityMasks: [[]],\n        entityComponents: new Map(),\n        bitflag: 1,\n        componentMap: new Map(),\n        componentCount: 0,\n        queries: new Set(),\n        queriesHashMap: new Map(),\n        notQueries: new Set(),\n        dirtyQueries: new Set(),\n        entitiesWithRelations: new Set(),\n}) as World<T>\n\n/**\n * Creates a new world with various configurations.\n * @template T\n * @param {...Array<EntityIndex | object>} args - EntityIndex, context object, or both.\n * @returns {World<T>} The created world.\n */\n\n// TODO: middleware\n\nexport function createWorld<T extends object = {}>(\n    ...args: Array<EntityIndex | T>\n): World<T> {\n    let entityIndex: EntityIndex | undefined\n    let context: T | undefined\n\n    args.forEach(arg => {\n        if (typeof arg === 'object' && 'add' in arg && 'remove' in arg) {\n            entityIndex = arg as EntityIndex\n        } else if (typeof arg === 'object') {\n            context = arg as T\n        }\n    })\n\n    return createBaseWorld<T>(context, entityIndex)\n}\n\n/**\n * Resets a world.\n *\n * @param {World} world\n * @returns {object}\n */\nexport const resetWorld = (world: World) => {\n    const ctx = (world as InternalWorld)[$internal]\n    ctx.entityIndex = createEntityIndex()\n    ctx.entityMasks = [[]]\n    ctx.entityComponents = new Map()\n    ctx.bitflag = 1\n    ctx.componentMap = new Map()\n    ctx.componentCount = 0\n    ctx.queries = new Set()\n    ctx.queriesHashMap = new Map()\n    ctx.notQueries = new Set()\n    ctx.dirtyQueries = new Set()\n    ctx.entitiesWithRelations = new Set()\n    return world\n}\n\n/**\n * Deletes a world by removing its internal data.\n *\n * @param {World} world - The world to be deleted.\n */\nexport const deleteWorld = (world: World) => {\n    delete (world as any)[$internal];\n}\n\n/**\n * Returns all components registered to a world\n *\n * @param {World} world\n * @returns Array\n */\nexport const getWorldComponents = (world: World) =>\n    Object.keys((world as InternalWorld)[$internal].componentMap)\n\n/**\n * Returns all existing entities in a world\n *\n * @param {World} world\n * @returns Array\n */\nexport const getAllEntities = (world: World): readonly EntityId[] => Array.from((world as InternalWorld)[$internal].entityComponents.keys())\n", "export type SparseSet = {\n    add: (val: number) => void\n    remove: (val: number) => void\n    has: (val: number) => boolean\n    sparse: number[]\n    dense: number[] | Uint32Array\n    reset: () => void\n}\n\nexport const createSparseSet = (): SparseSet => {\n\tconst dense: number[] = []\n\tconst sparse: number[] = []\n\n\tconst has = (val: number) => dense[sparse[val]] === val\n\n\tconst add = (val: number) => {\n\t\tif (has(val)) return\n\t\tsparse[val] = dense.push(val) - 1\n\t}\n\n\tconst remove = (val: number) => {\n\t\tif (!has(val)) return\n\t\tconst index = sparse[val]\n\t\tconst swapped = dense.pop()!\n\t\tif (swapped !== val) {\n\t\t\tdense[index] = swapped\n\t\t\tsparse[swapped] = index\n\t\t}\n\t}\n\n\tconst reset = () => {\n\t\tdense.length = 0\n\t\tsparse.length = 0\n\t}\n\n\treturn {\n\t\tadd,\n\t\tremove,\n\t\thas,\n\t\tsparse,\n\t\tdense,\n\t\treset,\n\t}\n}\n\nconst SharedArrayBufferOrArrayBuffer = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer\n\nexport const createUint32SparseSet = (initialCapacity: number = 1000): SparseSet => {\n\tconst sparse: number[] = []\n\tlet length = 0\n\tlet dense: Uint32Array = new Uint32Array(new SharedArrayBufferOrArrayBuffer(initialCapacity * 4))\n\n\tconst has = (val: number) => val < sparse.length && sparse[val] < length && dense[sparse[val]] === val\n\n\tconst add = (val: number) => {\n\t\tif (has(val)) return\n\t\tif (length >= dense.length) {\n\t\t\tconst newDense = new Uint32Array(new SharedArrayBufferOrArrayBuffer(dense.length * 2 * 4))\n\t\t\tnewDense.set(dense)\n\t\t\tdense = newDense\n\t\t}\n\t\tdense[length] = val\n\t\tsparse[val] = length\n\t\tlength++\n\t}\n\n\tconst remove = (val: number) => {\n\t\tif (!has(val)) return\n\t\tlength--\n\t\tconst index = sparse[val]\n\t\tconst swapped = dense[length]\n\t\tdense[index] = swapped\n\t\tsparse[swapped] = index\n\t}\n\n\tconst reset = () => {\n\t\tlength = 0\n\t\tsparse.length = 0\n\t}\n\n\treturn {\n\t\tadd,\n\t\tremove,\n\t\thas,\n\t\tsparse,\n\t\tget dense() {\n\t\t\treturn new Uint32Array(dense.buffer, 0, length)\n\t\t},\n\t\treset,\n\t}\n}", "import { EntityId } from \"../Entity\"\n\nexport type Observer = (entity: EntityId, ...args: any[]) => void | object\n\nexport interface Observable {\n  subscribe: (observer: Observer) => () => void\n  notify: (entity: EntityId, ...args: any[])  => void | object\n}\n\nexport const createObservable = (): Observable => {\n  const observers = new Set<Observer>()\n\n  const subscribe = (observer: Observer) => {\n    observers.add(observer)\n    return () => {\n      observers.delete(observer)\n    }\n  }\n  const notify = (entity: EntityId, ...args: any[]) => {\n    return Array.from(observers).reduce((acc, listener) => {\n      const result = listener(entity, ...args)\n      return result && typeof result === 'object' ? { ...acc, ...result } : acc\n    }, {})\n  }\n\n  return {\n    subscribe,\n    notify\n  }\n}\n", "import { createSparseSet, createUint32SparseSet, type SparseSet } from './utils/SparseSet'\nimport { hasComponent, registerComponent } from './Component'\nimport { ComponentRef, ComponentData } from './Component'\nimport { World } from \"./World\"\nimport { InternalWorld } from './World'\nimport { $internal } from './World'\nimport { createObservable } from './utils/Observer'\nimport { EntityId, Prefab } from './Entity'\n\n/**\n * @typedef {Uint32Array | readonly number[]} QueryResult\n * @description The result of a query, either as a Uint32Array or a readonly array of numbers.\n */\nexport type QueryResult = Uint32Array | readonly EntityId[]\n\n/**\n * @typedef {Object} Query\n * @description Represents a query in the ECS.\n * @property {ComponentRef[]} allComponents - All components in the query.\n * @property {ComponentRef[]} orComponents - Components in an OR relationship.\n * @property {ComponentRef[]} notComponents - Components that should not be present.\n * @property {Object.<number, number>} masks - Bitmasks for each component generation.\n * @property {Object.<number, number>} orMasks - OR bitmasks for each component generation.\n * @property {Object.<number, number>} notMasks - NOT bitmasks for each component generation.\n * @property {Object.<number, number>} hasMasks - HAS bitmasks for each component generation.\n * @property {number[]} generations - Component generations.\n * @property {SparseSet} toRemove - Set of entities to be removed.\n * @property {ReturnType<typeof createObservable>} addObservable - Observable for entity additions.\n * @property {ReturnType<typeof createObservable>} removeObservable - Observable for entity removals.\n */\nexport type Query = SparseSet & {\n\tallComponents: ComponentRef[]\n\torComponents: ComponentRef[]\n\tnotComponents: ComponentRef[]\n\tmasks: Record<number, number>\n\torMasks: Record<number, number>\n\tnotMasks: Record<number, number>\n\thasMasks: Record<number, number>\n\tgenerations: number[]\n\ttoRemove: SparseSet\n\taddObservable: ReturnType<typeof createObservable>\n\tremoveObservable: ReturnType<typeof createObservable>\n\tqueues: Record<any, any>\n}\n\n/**\n * @typedef {'Or' | 'And' | 'Not'} QueryOperatorType\n * @description Types of query operators.\n */\nexport type QueryOperatorType = 'Or' | 'And' | 'Not'\n/**\n * Symbol for query operator type.\n * @type {Symbol}\n */\nexport const $opType = Symbol.for('bitecs-opType')\n\n/**\n * Symbol for query operator terms.\n * @type {Symbol}\n */\nexport const $opTerms = Symbol.for('bitecs-opTerms')\n\n/**\n * @typedef {Object} OpReturnType\n * @property {symbol} [$opType] - The type of the operator.\n * @property {symbol} [$opTerms] - The components involved in the operation.\n */\nexport type OpReturnType = {\n\t[$opType]: string\n\t[$opTerms]: ComponentRef[]\n}\n\n/**\n * @typedef {Function} QueryOperator\n * @description A function that creates a query operator.\n * @param {...ComponentRef} components - The components to apply the operator to.\n * @returns {OpReturnType} The result of the operator.\n */\nexport type QueryOperator = (...components: ComponentRef[]) => OpReturnType\n\n/**\n * @typedef {ComponentRef | QueryOperator} QueryTerm\n * @description A term in a query, either a component reference or a query operator.\n */\nexport type QueryTerm = ComponentRef | QueryOperator\n\n\n// Aliases\nexport type OrOp = QueryOperator\nexport type AndOp = QueryOperator\nexport type NotOp = QueryOperator\nexport type AnyOp = OrOp\nexport type AllOp = AndOp\nexport type NoneOp = NotOp\n\n/**\n * @function Or\n * @description Creates an 'Or' query operator.\n * @param {...ComponentRef} components - The components to apply the 'Or' operator to.\n * @returns {OpReturnType} The 'Or' operator configuration.\n */\nexport const Or: OrOp = (...components: ComponentRef[]) => ({\n\t[$opType]: 'Or',\n\t[$opTerms]: components\n})\n\n/**\n * @function And\n * @description Creates an 'And' query operator.\n * @param {...ComponentRef} components - The components to apply the 'And' operator to.\n * @returns {OpReturnType} The 'And' operator configuration.\n */\nexport const And: AndOp = (...components: ComponentRef[]) => ({\n\t[$opType]: 'And',\n\t[$opTerms]: components\n})\n\n/**\n * @function Not\n * @description Creates a 'Not' query operator.\n * @param {...ComponentRef} components - The components to apply the 'Not' operator to.\n * @returns {OpReturnType} The 'Not' operator configuration.\n */\nexport const Not: NotOp = (...components: ComponentRef[]) => ({\n\t[$opType]: 'Not',\n\t[$opTerms]: components\n})\n\nexport const Any: AnyOp = Or\nexport const All: AllOp = And\nexport const None: NoneOp = Not\n\n/**\n * @typedef {Function} ObservableHook\n * @description A function that creates an observable hook for queries.\n * @param {...QueryTerm} terms - The query terms to observe.\n * @returns {{type: 'add' | 'remove' | 'set', terms: QueryTerm[]}} The observable hook configuration.\n */\nexport type ObservableHookDef = (...terms: QueryTerm[]) => {\n\t[$opType]: 'add' | 'remove' | 'set' | 'get'\n\t[$opTerms]: QueryTerm[]\n}\n\nexport type ObservableHook = ReturnType<ObservableHookDef>\n\n/**\n * @function onAdd\n * @description Creates an 'add' observable hook.\n * @param {...QueryTerm} terms - The query terms to observe for addition.\n * @returns {OpReturnType} The 'add' observable hook configuration.\n */\nexport const onAdd: ObservableHookDef = (...terms: QueryTerm[]) => ({\n\t[$opType]: 'add',\n\t[$opTerms]: terms\n})\n\n/**\n * @function onRemove\n * @description Creates a 'remove' observable hook.\n * @param {...QueryTerm} terms - The query terms to observe for removal.\n * @returns {OpReturnType} The 'remove' observable hook configuration.\n */\nexport const onRemove: ObservableHookDef = (...terms: QueryTerm[]) => ({\n\t[$opType]: 'remove',\n\t[$opTerms]: terms\n})\n\n/**\n * @function onSet\n * @description Creates a 'set' observable hook.\n * @param {...QueryTerm} terms - The query terms to observe for setting.\n * @returns {OpReturnType} The 'set' observable hook configuration.\n */\nexport const onSet: ObservableHookDef = (component: ComponentRef) => ({\n\t[$opType]: 'set',\n\t[$opTerms]: [component]\n})\n\n/**\n * @function onGet\n * @description Creates a 'get' observable hook.\n * @param {...QueryTerm} terms - The query terms to observe for getting.\n * @returns {OpReturnType} The 'get' observable hook configuration.\n */\nexport const onGet: ObservableHookDef = (component: ComponentRef) => ({\n\t[$opType]: 'get',\n\t[$opTerms]: [component]\n})\n\n/**\n * @function observe\n * @description Observes changes in entities based on specified components.\n * @param {World} world - The world object.\n * @param {ObservableHook} hook - The observable hook.\n * @param {function(number): any} callback - The callback function to execute when changes occur.\n * @returns {function(): void} A function to unsubscribe from the observation.\n */\nexport function observe(world: World, hook: ObservableHook, callback: (eid: EntityId, ...args: any[]) => any): () => void {\n\tconst ctx = (world as InternalWorld)[$internal]\n\tconst { [$opType]: type, [$opTerms]: components } = hook\n\n\tif (type === 'add' || type === 'remove') {\n\t\tconst hash = queryHash(world, components)\n\t\tlet queryData = ctx.queriesHashMap.get(hash)!\n\n\t\tif (!queryData) {\n\t\t\tqueryData = registerQuery(world, components)\n\t\t}\n\n\t\tconst observableKey = type === 'add' ? 'addObservable' : 'removeObservable'\n\t\treturn queryData[observableKey].subscribe(callback)\n\t} else if (type === 'set' || type === 'get') {\n\t\tif (components.length !== 1) {\n\t\t\tthrow new Error('Set and Get hooks can only observe a single component')\n\t\t}\n\t\tconst component = components[0]\n\t\tlet componentData = ctx.componentMap.get(component)\n\t\tif (!componentData) {\n\t\t\tcomponentData = registerComponent(world, component)\n\t\t}\n\t\tconst observableKey = type === 'set' ? 'setObservable' : 'getObservable'\n\t\treturn componentData[observableKey].subscribe(callback)\n\t}\n\n\tthrow new Error(`Invalid hook type: ${type}`)\n}\n\n/**\n * @function queryHash\n * @description Generates a hash for a query based on its terms.\n * @param {World} world - The world object.\n * @param {QueryTerm[]} terms - The query terms.\n * @returns {string} The generated hash.\n */\nexport const queryHash = (world: World, terms: QueryTerm[]): string => {\n\tconst ctx = (world as InternalWorld)[$internal]\n\n\tconst getComponentId = (component: ComponentRef): number => {\n\t\tif (!ctx.componentMap.has(component)) {\n\t\t\tregisterComponent(world, component)\n\t\t}\n\t\treturn ctx.componentMap.get(component)!.id\n\t}\n\tconst termToString = (term: QueryTerm): string => {\n\t\tif ($opType in term) {\n\t\t\tconst componentIds = term[$opTerms].map(getComponentId)\n\t\t\tconst sortedComponentIds = componentIds.sort((a, b) => a - b)\n\t\t\tconst sortedType = term[$opType].toLowerCase()\n\t\t\treturn `${sortedType}(${sortedComponentIds.join(',')})`\n\t\t} else {\n\t\t\treturn getComponentId(term).toString()\n\t\t}\n\t}\n\n\treturn terms\n\t\t.map(termToString)\n\t\t.sort()\n\t\t.join('-')\n}\n\n/**\n * @function registerQuery\n * @description Registers a new query in the world.\n * @param {World} world - The world object.\n * @param {QueryTerm[]} terms - The query terms.\n * @param {Object} [options] - Additional options.\n * @param {boolean} [options.buffered] - Whether the query should be buffered.\n * @returns {Query} The registered query.\n */\nexport const registerQuery = (world: World, terms: QueryTerm[], options: { buffered?: boolean } = {}): Query => {\n\tconst ctx = (world as InternalWorld)[$internal]\n\tconst hash = queryHash(world, terms)\n\t// if (ctx.queriesHashMap.has(hash)) {\n\t// \treturn ctx.queriesHashMap.get(hash)!\n\t// }\n\tconst components: ComponentRef[] = []\n\tconst notComponents: ComponentRef[] = []\n\tconst orComponents: ComponentRef[] = []\n\n\tconst processComponents = (comps: ComponentRef[], targetArray: ComponentRef[]) => {\n\t\tcomps.forEach((comp: ComponentRef) => {\n\t\t\tif (!ctx.componentMap.has(comp)) registerComponent(world, comp)\n\t\t\ttargetArray.push(comp)\n\t\t})\n\t}\n\n\tterms.forEach((term: QueryTerm) => {\n\t\tif ($opType in term) {\n\t\t\tif (term[$opType] === 'Not') {\n\t\t\t\tprocessComponents(term[$opTerms], notComponents)\n\t\t\t} else if (term[$opType] === 'Or') {\n\t\t\t\tprocessComponents(term[$opTerms], orComponents)\n\t\t\t}\n\t\t} else {\n\t\t\tif (!ctx.componentMap.has(term)) registerComponent(world, term)\n\t\t\tcomponents.push(term)\n\t\t}\n\t})\n\n\tconst mapComponents = (c: ComponentRef) => ctx.componentMap.get(c)!\n\tconst allComponents = components.concat(notComponents.flat()).concat(orComponents.flat()).map(mapComponents)\n\n\tconst sparseSet = options.buffered ? createUint32SparseSet() : createSparseSet()\n\n\tconst toRemove = createSparseSet()\n\n\tconst generations = allComponents\n\t\t.map((c) => c.generationId)\n\t\t.reduce((a, v) => {\n\t\t\tif (a.includes(v)) return a\n\t\t\ta.push(v)\n\t\t\treturn a\n\t\t}, [] as number[])\n\n\tconst reduceBitflags = (a: { [key: number]: number }, c: ComponentData) => {\n\t\tif (!a[c.generationId]) a[c.generationId] = 0\n\t\ta[c.generationId] |= c.bitflag\n\t\treturn a\n\t}\n\n\tconst masks = components.map(mapComponents).reduce(reduceBitflags, {})\n\tconst notMasks = notComponents.map(mapComponents).reduce(reduceBitflags, {})\n\tconst orMasks = orComponents.map(mapComponents).reduce(reduceBitflags, {})\n\tconst hasMasks = allComponents.reduce(reduceBitflags, {})\n\n\tconst addObservable = createObservable()\n\tconst removeObservable = createObservable()\n\n\tconst query = Object.assign(sparseSet, {\n\t\tcomponents,\n\t\tnotComponents,\n\t\torComponents,\n\t\tallComponents,\n\t\tmasks,\n\t\tnotMasks,\n\t\torMasks,\n\t\thasMasks,\n\t\tgenerations,\n\t\ttoRemove,\n\t\taddObservable,\n\t\tremoveObservable,\n\t\tqueues: {},\n\t}) as Query\n\n\tctx.queries.add(query)\n\n\tctx.queriesHashMap.set(hash, query)\n\n\tallComponents.forEach((c) => {\n\t\tc.queries.add(query)\n\t})\n\n\tif (notComponents.length) ctx.notQueries.add(query)\n\n\tconst entityIndex = ctx.entityIndex\n\tfor (let i = 0; i < entityIndex.aliveCount; i++) {\n\t\tconst eid = entityIndex.dense[i]\n\t\tif (hasComponent(world, eid, Prefab)) continue\n\t\tconst match = queryCheckEntity(world, query, eid)\n\t\tif (match) {\n\t\t\tqueryAddEntity(query, eid)\n\t\t}\n\t}\n\n\treturn query\n}\n\n/**\n * @function innerQuery\n * @description Performs an internal query operation.\n * @param {World} world - The world object.\n * @param {QueryTerm[]} terms - The query terms.\n * @param {Object} [options] - Additional options.\n * @param {boolean} [options.buffered] - Whether the query should be buffered.\n * @returns {QueryResult} The result of the query.\n */\nexport function innerQuery(world: World, terms: QueryTerm[], options: { buffered?: boolean } = {}): QueryResult {\n\tconst ctx = (world as InternalWorld)[$internal]\n\tconst hash = queryHash(world, terms)\n\tlet queryData = ctx.queriesHashMap.get(hash)\n\tif (!queryData) {\n\t\tqueryData = registerQuery(world, terms, options)\n\t} else if (options.buffered && !('buffer' in queryData.dense)) {\n\t\tqueryData = registerQuery(world, terms, { buffered: true })\n\t}\n\treturn queryData.dense\n}\n\n/**\n * @function query\n * @description Performs a query operation.\n * @param {World} world - The world object.\n * @param {QueryTerm[]} terms - The query terms.\n * @returns {readonly EntityId[]} The result of the query as a readonly array of entity IDs.\n */\nexport function query(world: World, terms: QueryTerm[]): readonly EntityId[] {\n\tcommitRemovals(world)\n\treturn innerQuery(world, terms) as EntityId[]\n}\n\n/**\n * @function bufferQuery\n * @description Performs a buffered query operation.\n * @param {World} world - The world object.\n * @param {QueryTerm[]} terms - The query terms.\n * @returns {Uint32Array} The result of the query as a Uint32Array.\n */\nexport function bufferQuery(world: World, terms: QueryTerm[]): Uint32Array {\n\tcommitRemovals(world)\n\treturn innerQuery(world, terms, { buffered: true }) as Uint32Array\n}\n\n/**\n * @function queryCheckEntity\n * @description Checks if an entity matches a query.\n * @param {World} world - The world object.\n * @param {Query} query - The query to check against.\n * @param {number} eid - The entity ID to check.\n * @returns {boolean} True if the entity matches the query, false otherwise.\n */\nexport function queryCheckEntity(world: World, query: Query, eid: EntityId): boolean {\n\tconst ctx = (world as InternalWorld)[$internal]\n\tconst { masks, notMasks, orMasks, generations } = query\n\n\tfor (let i = 0; i < generations.length; i++) {\n\t\tconst generationId = generations[i]\n\t\tconst qMask = masks[generationId]\n\t\tconst qNotMask = notMasks[generationId]\n\t\tconst qOrMask = orMasks[generationId]\n\t\tconst eMask = ctx.entityMasks[generationId][eid]\n\n\t\tif (qNotMask && (eMask & qNotMask) !== 0) {\n\t\t\treturn false\n\t\t}\n\n\t\tif (qMask && (eMask & qMask) !== qMask) {\n\t\t\treturn false\n\t\t}\n\n\t\tif (qOrMask && (eMask & qOrMask) === 0) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\n/**\n * @function queryCheckComponent\n * @description Checks if a component matches a query.\n * @param {Query} query - The query to check against.\n * @param {ComponentData} c - The component data to check.\n * @returns {boolean} True if the component matches the query, false otherwise.\n */\nexport const queryCheckComponent = (query: Query, c: ComponentData) => {\n\tconst { generationId, bitflag } = c\n\tconst { hasMasks } = query\n\tconst mask = hasMasks[generationId]\n\treturn (mask & bitflag) === bitflag\n}\n\n/**\n * @function queryAddEntity\n * @description Adds an entity to a query.\n * @param {Query} query - The query to add the entity to.\n * @param {number} eid - The entity ID to add.\n */\nexport const queryAddEntity = (query: Query, eid: EntityId) => {\n\tquery.toRemove.remove(eid)\n\n\tquery.addObservable.notify(eid)\n\n\tquery.add(eid)\n}\n\n/**\n * @function queryCommitRemovals\n * @description Commits removals for a query.\n * @param {Query} query - The query to commit removals for.\n */\nconst queryCommitRemovals = (query: Query) => {\n\tfor (let i = 0; i < query.toRemove.dense.length; i++) {\n\t\tconst eid = query.toRemove.dense[i]\n\n\t\tquery.remove(eid)\n\t}\n\tquery.toRemove.reset()\n}\n\n/**\n * @function commitRemovals\n * @description Commits all pending removals for queries in the world.\n * @param {World} world - The world object.\n */\nexport const commitRemovals = (world: World) => {\n\tconst ctx = (world as InternalWorld)[$internal]\n\tif (!ctx.dirtyQueries.size) return\n\tctx.dirtyQueries.forEach(queryCommitRemovals)\n\tctx.dirtyQueries.clear()\n}\n\n/**\n * @function queryRemoveEntity\n * @description Removes an entity from a query.\n * @param {World} world - The world object.\n * @param {Query} query - The query to remove the entity from.\n * @param {number} eid - The entity ID to remove.\n */\nexport const queryRemoveEntity = (world: World, query: Query, eid: EntityId) => {\n\tconst ctx = (world as InternalWorld)[$internal]\n\tconst has = query.has(eid)\n\tif (!has || query.toRemove.has(eid)) return\n\tquery.toRemove.add(eid)\n\tctx.dirtyQueries.add(query)\n\tquery.removeObservable.notify(eid)\n}\n\n/**\n * @function removeQuery\n * @description Removes a query from the world.\n * @param {World} world - The world object.\n * @param {QueryTerm[]} terms - The query terms of the query to remove.\n */\nexport const removeQuery = (world: World, terms: QueryTerm[]) => {\n\tconst ctx = (world as InternalWorld)[$internal]\n\tconst hash = queryHash(world, terms)\n\tconst query = ctx.queriesHashMap.get(hash)\n\tif (query) {\n\t\tctx.queries.delete(query)\n\t\tctx.queriesHashMap.delete(hash)\n\t}\n}\n", "import { getEntityComponents, World } from '.'\nimport { EntityId } from './Entity'\nimport { defineHiddenProperty } from './utils/defineHiddenProperty'\n\n/**\n * Callback function type for when a target is removed from a relation.\n * @callback OnTargetRemovedCallback\n * @param {number} subject - The subject entity ID.\n * @param {number} target - The target entity ID.\n */\nexport type OnTargetRemovedCallback = (subject: EntityId, target: EntityId) => void\n\n/**\n * Possible types for a relation target.\n * @typedef {number | '*' | typeof Wildcard} RelationTarget\n */\nexport type RelationTarget = number | '*' | typeof Wildcard\n/**\n * Symbol for accessing the relation of a component.\n * @type {Symbol}\n */\nexport const $relation = Symbol.for('bitecs-relation')\n\n/**\n * Symbol for accessing the pair target of a component.\n * @type {Symbol}\n */\nexport const $pairTarget = Symbol.for('bitecs-pairTarget')\n\n/**\n * Symbol for checking if a component is a pair component.\n * @type {Symbol}\n */\nexport const $isPairComponent = Symbol.for('bitecs-isPairComponent')\n\n/**\n * Symbol for accessing the relation data of a component.\n * @type {Symbol}\n */\nexport const $relationData = Symbol.for('bitecs-relationData')\n\n/**\n * Interface for relation data.\n * @interface RelationData\n * @template T\n */\ntype RelationData<T> = {\n    pairsMap: Map<number | string | Relation<any>, T>\n    initStore: (eid: EntityId) => T\n    exclusiveRelation: boolean\n    autoRemoveSubject: boolean\n    onTargetRemoved: OnTargetRemovedCallback\n}\n\n/**\n * Type definition for a Relation function.\n * @template T\n * @typedef {function} Relation\n * @param {RelationTarget} target - The target of the relation.\n * @returns {T} The relation component.\n */\nexport type Relation<T> = (target: RelationTarget) => T\n\n/**\n * Creates a base relation.\n * @template T\n * @returns {Relation<T>} The created base relation.\n */\nconst createBaseRelation = <T>(): Relation<T> => {\n    const data = {\n        pairsMap: new Map(),\n        initStore: undefined,\n        exclusiveRelation: false,\n        autoRemoveSubject: false,\n        onTargetRemoved: undefined\n    }\n    const relation = (target: RelationTarget): T => {\n        if (target === undefined) throw Error('Relation target is undefined')\n        const normalizedTarget = target === '*' ? Wildcard : target\n        if (!data.pairsMap.has(normalizedTarget)) {\n            const component = data.initStore ? data.initStore(target) : {} as T\n            defineHiddenProperty(component, $relation, relation)\n            defineHiddenProperty(component, $pairTarget, normalizedTarget)\n            defineHiddenProperty(component, $isPairComponent, true)\n            data.pairsMap.set(normalizedTarget, component)\n        }\n\n        return data.pairsMap.get(normalizedTarget)!\n    }\n\n    defineHiddenProperty(relation, $relationData, data)\n\n    return relation as Relation<T>\n}\n\n/**\n * Adds a store to a relation.\n * @template T\n * @param {function(): T} createStore - Function to create the store.\n * @returns {function(Relation<T>): Relation<T>} A function that modifies the relation.\n */\nexport const withStore = <T>(createStore: (eid: EntityId) => T) => (relation: Relation<T>): Relation<T> => {\n    const ctx = relation[$relationData] as RelationData<T>\n    ctx.initStore = createStore\n    return relation\n}\n\n/**\n * Makes a relation exclusive.\n * @template T\n * @param {Relation<T>} relation - The relation to make exclusive.\n * @returns {Relation<T>} The modified relation.\n */\nexport const makeExclusive = <T>(relation: Relation<T>): Relation<T> => {\n    const ctx = relation[$relationData] as RelationData<T>\n    ctx.exclusiveRelation = true\n    return relation\n}\n\n/**\n * Adds auto-remove subject behavior to a relation.\n * @template T\n * @param {Relation<T>} relation - The relation to modify.\n * @returns {Relation<T>} The modified relation.\n */\nexport const withAutoRemoveSubject = <T>(relation: Relation<T>): Relation<T> => {\n    const ctx = relation[$relationData] as RelationData<T>\n    ctx.autoRemoveSubject = true\n    return relation\n}\n\n/**\n * Adds an onTargetRemoved callback to a relation.\n * @template T\n * @param {OnTargetRemovedCallback} onRemove - The callback to add.\n * @returns {function(Relation<T>): Relation<T>} A function that modifies the relation.\n */\nexport const withOnTargetRemoved = <T>(onRemove: OnTargetRemovedCallback) => (relation: Relation<T>): Relation<T> => {\n    const ctx = relation[$relationData] as RelationData<T>\n    ctx.onTargetRemoved = onRemove\n    return relation\n}\n\n// TODO: withSetter\n/**\n * Adds validation to a relation.\n * @template T\n * @param {function(T): boolean} validateFn - The validation function.\n * @returns {function(Relation<T>): Relation<T>} A function that modifies the relation.\n */\nconst withValidation = <T>(validateFn: (value: T) => boolean) => (relation: Relation<T>): Relation<T> => {\n    const originalRelation = relation\n    return ((target: RelationTarget): T => {\n        const component = originalRelation(target)\n        if (!validateFn(component)) {\n            throw new Error('Validation failed for relation component')\n        }\n        return component\n    }) as Relation<T>\n}\n\n/**\n * Creates a pair from a relation and a target.\n * @template T\n * @param {Relation<T>} relation - The relation.\n * @param {RelationTarget} target - The target.\n * @returns {T} The created pair.\n * @throws {Error} If the relation is undefined.\n */\nexport const Pair = <T>(relation: Relation<T>, target: RelationTarget): T => {\n    if (relation === undefined) throw Error('Relation is undefined')\n    return relation(target)\n}\n\n/**\n * Gets the relation targets for an entity.\n * @param {World} world - The world object.\n * @param {Relation<any>} relation - The relation to get targets for.\n * @param {number} eid - The entity ID.\n * @returns {Array<any>} An array of relation targets.\n */\nexport const getRelationTargets = (world: World, eid: EntityId, relation: Relation<any>): number[] => {\n\tconst components = getEntityComponents(world, eid)\n\tconst targets = []\n\tfor (const c of components) {\n\t\tif (c[$relation] === relation && c[$pairTarget] !== Wildcard && !isRelation(c[$pairTarget])) {\n\t\t\ttargets.push(c[$pairTarget])\n\t\t}\n\t}\n\treturn targets\n}\n\n/**\n * Creates a new relation.\n * @template T\n * @param {...Array<function(Relation<T>): Relation<T>>} modifiers - Modifier functions for the relation.\n * @returns {Relation<T>} The created relation.\n */\nexport function createRelation<T>(...modifiers: Array<(relation: Relation<T>) => Relation<T>>): Relation<T>\n\n/**\n * Creates a new relation with options.\n * @template T\n * @param {Object} options - Options for creating the relation.\n * @param {function(): T} [options.store] - Function to create the store.\n * @param {boolean} [options.exclusive] - Whether the relation is exclusive.\n * @param {boolean} [options.autoRemoveSubject] - Whether to auto-remove the subject.\n * @param {OnTargetRemovedCallback} [options.onTargetRemoved] - Callback for when a target is removed.\n * @returns {Relation<T>} The created relation.\n */\nexport function createRelation<T>(options: {\n    store?: () => T\n    exclusive?: boolean\n    autoRemoveSubject?: boolean\n    onTargetRemoved?: OnTargetRemovedCallback\n}): Relation<T>\nexport function createRelation<T>(\n    ...args: Array<(relation: Relation<T>) => Relation<T>> | [{\n        store?: () => T\n        exclusive?: boolean\n        autoRemoveSubject?: boolean\n        onTargetRemoved?: OnTargetRemovedCallback\n    }]\n): Relation<T> {\n    if (args.length === 1 && typeof args[0] === 'object') {\n        const { store, exclusive, autoRemoveSubject, onTargetRemoved } = args[0]\n        const modifiers = [\n            store && withStore(store),\n            exclusive && makeExclusive,\n            autoRemoveSubject && withAutoRemoveSubject,\n            onTargetRemoved && withOnTargetRemoved(onTargetRemoved)\n        ].filter(Boolean) as Array<(relation: Relation<T>) => Relation<T>>\n        return modifiers.reduce((acc, modifier) => modifier(acc), createBaseRelation<T>())\n    } else {\n        const modifiers = args as Array<(relation: Relation<T>) => Relation<T>>\n        return modifiers.reduce((acc, modifier) => modifier(acc), createBaseRelation<T>())\n    }\n}\n\n/**\n * Symbol used to mark a relation as a wildcard relation\n */\nexport const $wildcard = Symbol.for('bitecs-wildcard')\n\n/**\n * Creates a wildcard relation that matches any target.\n * @template T\n * @returns {Relation<T>} The created wildcard relation.\n */\nexport function createWildcardRelation<T>(): Relation<T> {\n    const relation = createBaseRelation<T>()\n    Object.defineProperty(relation, $wildcard, {\n        value: true,\n        enumerable: false,\n        writable: false,\n        configurable: false\n    })\n    return relation\n}\n\n/**\n * Gets the singleton wildcard instance.\n * @returns {Relation<any>} The global wildcard relation instance.\n */\nexport function getWildcard(): Relation<any> {\n    const GLOBAL_WILDCARD = Symbol.for('bitecs-global-wildcard')\n    \n    if (!(globalThis as any)[GLOBAL_WILDCARD]) {\n        (globalThis as any)[GLOBAL_WILDCARD] = createWildcardRelation()\n    }\n    \n    return (globalThis as any)[GLOBAL_WILDCARD]\n}\n\n/**\n * Wildcard relation.\n * @type {Relation<any>}\n */\nexport const Wildcard = getWildcard()\n\n/**\n * Creates an IsA relation.\n * @template T\n * @returns {Relation<T>} The created IsA relation.\n */\nexport function createIsARelation<T>(): Relation<T> {\n    return createBaseRelation<T>()\n}\n\n/**\n * Gets the singleton IsA instance.\n * @returns {Relation<any>} The global IsA relation instance.\n */\nexport function getIsA(): Relation<any> {\n    const GLOBAL_ISA = Symbol.for('bitecs-global-isa')\n    \n    if (!(globalThis as any)[GLOBAL_ISA]) {\n        (globalThis as any)[GLOBAL_ISA] = createIsARelation()\n    }\n    \n    return (globalThis as any)[GLOBAL_ISA]\n}\n\n/**\n * IsA relation.\n * @type {Relation<any>}\n */\nexport const IsA = getIsA()\n\n/**\n * Checks if a relation is a wildcard relation.\n * @param {any} relation - The relation to check.\n * @returns {boolean} True if the relation is a wildcard relation, false otherwise.\n */\nexport function isWildcard(relation: any): boolean {\n    if (!relation) return false\n    const symbols = Object.getOwnPropertySymbols(relation)\n    return symbols.includes($wildcard)\n}\n\n/**\n * Checks if a component is a relation.\n * @param {any} component - The component to check.\n * @returns {boolean} True if the component is a relation, false otherwise.\n */\nexport function isRelation(component: any): boolean {\n    if (!component) return false\n    const symbols = Object.getOwnPropertySymbols(component)\n    return symbols.includes($relationData)\n}\n", "import { entityExists, EntityId, getEntityComponents, Prefab } from './Entity'\nimport { queryAddEntity, queryCheckEntity, queryRemoveEntity } from './Query'\nimport { Query } from './Query'\nimport {\n\tIsA,\n\tPair,\n\tWildcard,\n\tgetRelationTargets,\n\t$relationData,\n\t$isPairComponent,\n\t$pairTarget,\n\t$relation\n} from './Relation'\nimport { createObservable, Observable } from './utils/Observer'\nimport { $internal, InternalWorld, World, WorldContext } from './World'\n\n/**\n * Represents a reference to a component.\n * @typedef {any} ComponentRef\n */\nexport type ComponentRef = any\n\n/**\n * Represents the data associated with a component.\n * @interface ComponentData\n * @property {number} id - The unique identifier for the component.\n * @property {number} generationId - The generation ID of the component.\n * @property {number} bitflag - The bitflag used for component masking.\n * @property {ComponentRef} ref - Reference to the component.\n * @property {Set<Query>} queries - Set of queries associated with the component.\n * @property {Observable} setObservable - Observable for component changes.\n */\nexport interface ComponentData {\n\tid: number\n\tgenerationId: number\n\tbitflag: number\n\tref: ComponentRef\n\tqueries: Set<Query>\n\tsetObservable: Observable\n\tgetObservable: Observable\n}\n\n/**\n * Registers a component with the world.\n * @param {World} world - The world object.\n * @param {ComponentRef} component - The component to register.\n * @returns {ComponentData} The registered component data.\n * @throws {Error} If the component is null or undefined.\n */\nexport const registerComponent = (world: World, component: ComponentRef) => {\n\tif (!component) {\n\t\tthrow new Error(`bitECS - Cannot register null or undefined component`)\n\t}\n\n\tconst ctx = (world as InternalWorld)[$internal]\n\tconst queries = new Set<Query>()\n\n\tconst data: ComponentData = {\n\t\tid: ctx.componentCount++,\n\t\tgenerationId: ctx.entityMasks.length - 1,\n\t\tbitflag: ctx.bitflag,\n\t\tref: component,\n\t\tqueries,\n\t\tsetObservable: createObservable(),\n\t\tgetObservable: createObservable(),\n\t}\n\n\tctx.componentMap.set(component, data)\n\n\tctx.bitflag *= 2\n\tif (ctx.bitflag >= 2 ** 31) {\n\t\tctx.bitflag = 1\n\t\tctx.entityMasks.push([])\n\t}\n\n\treturn data\n}\n\n/**\n * Registers multiple components with the world.\n * @param {World} world - The world object.\n * @param {ComponentRef[]} components - Array of components to register.\n */\nexport const registerComponents = (world: World, components: ComponentRef[]) => {\n\tcomponents.forEach((component) => registerComponent(world, component))\n}\n\n/**\n * Checks if an entity has a specific component.\n * @param {World} world - The world object.\n * @param {number} eid - The entity ID.\n * @param {ComponentRef} component - The component to check for.\n * @returns {boolean} True if the entity has the component, false otherwise.\n */\nexport const hasComponent = (world: World, eid: EntityId, component: ComponentRef): boolean => {\n\tconst ctx = (world as InternalWorld)[$internal]\n\tconst registeredComponent = ctx.componentMap.get(component)\n\tif (!registeredComponent) return false\n\n\tconst { generationId, bitflag } = registeredComponent\n\tconst mask = ctx.entityMasks[generationId][eid]\n\n\treturn (mask & bitflag) === bitflag\n}\n/**\n * Retrieves the data associated with a component for a specific entity.\n * @param {World} world - The world object.\n * @param {EntityId} eid - The entity ID.\n * @param {ComponentRef} component - The component to retrieve data for.\n * @returns {any} The component data, or undefined if the component is not found or the entity doesn't have the component.\n */\nexport const getComponentData = (world: World, eid: EntityId, component: ComponentRef): any => {\n\tconst ctx = (world as InternalWorld)[$internal]\n\tconst componentData = ctx.componentMap.get(component)\n\n\tif (!componentData) {\n\t\treturn undefined\n\t}\n\n\tif (!hasComponent(world, eid, component)) {\n\t\treturn undefined\n\t}\n\n\t// Notify observers that this component is being accessed\n\treturn componentData.getObservable.notify(eid)\n}\n\n/**\n * Helper function to set component data.\n * @param {ComponentRef} component - The component to set.\n * @param {any} data - The data to set for the component.\n * @returns {{ component: ComponentRef, data: any }} An object containing the component and its data.\n */\nexport const set = <T extends ComponentRef>(component: T, data: any): { component: T, data: any } => ({\n\tcomponent,\n\tdata\n})\n\n/**\n * Recursvely inherits components from one entity to another.\n * @param {World} world - The world object.\n * @param {number} baseEid - The ID of the entity inheriting components.\n * @param {number} inheritedEid - The ID of the entity being inherited from.\n * @param {boolean} isFirstSuper - Whether this is the first super in the inheritance chain.\n */\nconst recursivelyInherit = (ctx: WorldContext, world: World, baseEid: EntityId, inheritedEid: EntityId, visited = new Set<EntityId>()): void => {\n\t// Guard against circular inheritance\n\tif (visited.has(inheritedEid)) return\n\tvisited.add(inheritedEid)\n\t\n\t// Add IsA relation first\n\taddComponent(world, baseEid, IsA(inheritedEid))\n\t\n\t// Copy components and their data from this level\n\t// This needs to happen before recursing to ancestors so closer ancestors take precedence\n\tfor (const component of getEntityComponents(world, inheritedEid)) {\n\t\t// TODO: inherit reference vs copy\n\t\tif (component === Prefab) continue\n\t\t\n\t\t// Only add component if entity doesn't already have it\n\t\t// This ensures closer ancestors take precedence\n\t\tif (!hasComponent(world, baseEid, component)) {\n\t\t\taddComponent(world, baseEid, component)\n\t\t\t\n\t\t\tconst componentData = ctx.componentMap.get(component)\n\t\t\tif (componentData?.setObservable) {\n\t\t\t\tconst data = getComponentData(world, inheritedEid, component)\n\t\t\t\tcomponentData.setObservable.notify(baseEid, data)\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Then recursively inherit from ancestors\n\t// This ensures more distant ancestors don't override closer ones\n\tfor (const parentEid of getRelationTargets(world, inheritedEid, IsA)) {\n\t\trecursivelyInherit(ctx, world, baseEid, parentEid, visited)\n\t}\n}\n\n/**\n * Represents a component with data to be set on an entity.\n */\ntype ComponentSetter<T = any> = { component: ComponentRef; data: T }\n\n/**\n * Adds one or more components to an entity.\n * @param {World} world - The world object.\n * @param {EntityId} eid - The entity ID.\n * @param {...(ComponentRef | ComponentSetter)} components - Components to add or set.\n * @throws {Error} If the entity does not exist in the world.\n */\nexport const addComponent = (world: World, eid: EntityId, ...components: (ComponentRef | ComponentSetter)[]): void => {\n\tif (!entityExists(world, eid)) {\n\t\tthrow new Error(`Cannot add component - entity ${eid} does not exist in the world.`)\n\t}\n\t\n\tconst ctx = (world as InternalWorld)[$internal]\n\t\n\tcomponents.forEach(componentOrSet => {\n\t\tconst component = 'component' in componentOrSet ? componentOrSet.component : componentOrSet\n\t\tconst data = 'data' in componentOrSet ? componentOrSet.data : undefined\n\n\t\tif (!ctx.componentMap.has(component)) registerComponent(world, component)\n\n\t\tconst componentData = ctx.componentMap.get(component)!\n\t\tif (data !== undefined) {\n\t\t\tcomponentData.setObservable.notify(eid, data)\n\t\t}\n\n\t\tif (hasComponent(world, eid, component)) return\n\n\t\tconst { generationId, bitflag, queries } = componentData\n\n\t\tctx.entityMasks[generationId][eid] |= bitflag\n\n\t\tif (!hasComponent(world, eid, Prefab)) {\n\t\t\tqueries.forEach((queryData: Query) => {\n\t\t\t\tqueryData.toRemove.remove(eid)\n\t\t\t\tconst match = queryCheckEntity(world, queryData, eid)\n\n\t\t\t\tif (match) queryAddEntity(queryData, eid)\n\t\t\t\telse queryRemoveEntity(world, queryData, eid)\n\t\t\t})\n\t\t}\n\t\tctx.entityComponents.get(eid)!.add(component)\n\t\tif (component[$isPairComponent]) {\n\t\t\tconst relation = component[$relation]\n\t\t\tconst target = component[$pairTarget]\n\n\t\t\t// Add both Wildcard pairs for relation and target\n\t\t\taddComponent(world, eid, Pair(relation, Wildcard))\n\t\t\taddComponent(world, eid, Pair(Wildcard, target))\n\n\t\t\t// For non-Wildcard targets, add Wildcard pair to track relation targets\n\t\t\tif (typeof target === 'number') {\n\t\t\t\t// Add Wildcard pair for target being a relation target\n\t\t\t\taddComponent(world, target, Pair(Wildcard, eid))\n\t\t\t\taddComponent(world, target, Pair(Wildcard, relation))\n\t\t\t\t// Track entities with relations for autoRemoveSubject\n\t\t\t\tctx.entitiesWithRelations.add(target)\n\t\t\t\tctx.entitiesWithRelations.add(eid)\n\t\t\t}\n\n\t\t\t// add target to a set to make autoRemoveSubject checks faster\n\t\t\tctx.entitiesWithRelations.add(target)\n\n\t\t\tconst relationData = relation[$relationData]\n\t\t\tif (relationData.exclusiveRelation === true && target !== Wildcard) {\n\t\t\t\tconst oldTarget = getRelationTargets(world, eid, relation)[0]\n\t\t\t\tif (oldTarget !== undefined && oldTarget !== null && oldTarget !== target) {\n\t\t\t\t\tremoveComponent(world, eid, relation(oldTarget))\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (relation === IsA) {\n\t\t\t\tconst inheritedTargets = getRelationTargets(world, eid, IsA)\n\t\t\t\tfor (const inherited of inheritedTargets) {\n\t\t\t\t\trecursivelyInherit(ctx, world, eid, inherited)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n}\n\n/**\n * Alias for addComponent.\n */\nexport const addComponents = addComponent\n\n/**\n * Removes one or more components from an entity.\n * @param {World} world - The world object.\n * @param {number} eid - The entity ID.\n * @param {...ComponentRef} components - Components to remove.\n * @throws {Error} If the entity does not exist in the world.\n */\nexport const removeComponent = (world: World, eid: EntityId, ...components: ComponentRef[]) => {\n\tconst ctx = (world as InternalWorld)[$internal]\n\tif (!entityExists(world, eid)) {\n\t\tthrow new Error(`Cannot remove component - entity ${eid} does not exist in the world.`)\n\t}\n\n\tcomponents.forEach(component => {\n\t\tif (!hasComponent(world, eid, component)) return\n\n\t\tconst componentNode = ctx.componentMap.get(component)!\n\t\tconst { generationId, bitflag, queries } = componentNode\n\n\t\tctx.entityMasks[generationId][eid] &= ~bitflag\n\n\t\tqueries.forEach((queryData: Query) => {\n\t\t\tqueryData.toRemove.remove(eid)\n\n\t\t\tconst match = queryCheckEntity(world, queryData, eid)\n\n\t\t\tif (match) queryAddEntity(queryData, eid)\n\t\t\telse queryRemoveEntity(world, queryData, eid)\n\t\t})\n\n\t\tctx.entityComponents.get(eid)!.delete(component)\n\n\t\tif (component[$isPairComponent]) {\n\t\t\tconst target = component[$pairTarget]\n\t\t\tremoveComponent(world, eid, Pair(Wildcard, target))\n\n\t\t\tconst relation = component[$relation]\n\t\t\tconst otherTargets = getRelationTargets(world, eid, relation)\n\t\t\tif (otherTargets.length === 0) {\n\t\t\t\tremoveComponent(world, eid, Pair(relation, Wildcard))\n\t\t\t}\n\t\t}\n\t})\n}\n\n/**\n * Alias for removeComponent.\n */\nexport const removeComponents = removeComponent\n", "import { addComponent, removeComponent } from './Component'\nimport {\n\tinnerQuery,\n\tqueryAddEntity,\n\tqueryCheckEntity,\n\tqueryRemoveEntity,\n} from './Query'\nimport { Pair, Wildcard, $isPairComponent, $relation, $pairTarget, $relationData } from './Relation'\nimport { World } from \"./World\"\nimport { InternalWorld } from './World'\nimport { addEntityId, isEntityIdAlive, removeEntityId } from './EntityIndex'\nimport { $internal } from './World'\nimport { ComponentRef } from './Component'\n\nexport type EntityId = number\n\nexport const Prefab = {}\nexport const addPrefab = (world: World): EntityId => {\n\tconst eid = addEntity(world)\n\n\taddComponent(world, eid, Prefab)\n\n\treturn eid\n}\n\n/**\n * Adds a new entity to the specified world.\n *\n * @param {World} world\n * @returns {number} eid\n */\nexport const addEntity = (world: World): EntityId => {\n\tconst ctx = (world as InternalWorld)[$internal]\n\tconst eid = addEntityId(ctx.entityIndex)\n\n\tctx.notQueries.forEach((q) => {\n\t\tconst match = queryCheckEntity(world, q, eid)\n\t\tif (match) queryAddEntity(q, eid)\n\t})\n\n\tctx.entityComponents.set(eid, new Set())\n\n\treturn eid\n}\n\n/**\n * Removes an existing entity from the specified world.\n *\n * @param {World} world\n * @param {number} eid\n */\n\nexport const removeEntity = (world: World, eid: EntityId) => {\n\tconst ctx = (world as InternalWorld)[$internal]\n\t// Check if entity is already removed\n\tif (!isEntityIdAlive(ctx.entityIndex, eid)) return\n\n\t// Remove relation components from entities that have a relation to this one, breadth-first\n\t// e.g. addComponent(world, child, ChildOf(parent))\n\t// when parent is removed, we need to remove the child\n\tconst removalQueue = [eid]\n\tconst processedEntities = new Set()\n    while (removalQueue.length > 0) {\n        \n\t\tconst currentEid = removalQueue.shift()!\n        if (processedEntities.has(currentEid)) continue\n        processedEntities.add(currentEid)\n\n        const componentRemovalQueue = []\n\n\t\tif (ctx.entitiesWithRelations.has(currentEid)) {\n\t\t\tfor (const subject of innerQuery(world, [Wildcard(currentEid)])) {\n\t\t\t\tif (!entityExists(world, subject)) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tfor (const component of ctx.entityComponents.get(subject)!) {\n\t\t\t\t\tif (!component[$isPairComponent]) {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\tconst relation = component[$relation]\n\t\t\t\t\tconst relationData = relation[$relationData]\n\t\t\t\t\tcomponentRemovalQueue.push(() => removeComponent(world, subject, Pair(Wildcard, currentEid)))\n\n\t\t\t\t\tif (component[$pairTarget] === currentEid) {\n\t\t\t\t\t\tcomponentRemovalQueue.push(() => removeComponent(world, subject, component))\n\t\t\t\t\t\tif (relationData.autoRemoveSubject) {\n\t\t\t\t\t\t\tremovalQueue.push(subject)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (relationData.onTargetRemoved) {\n\t\t\t\t\t\t\tcomponentRemovalQueue.push(() => relationData.onTargetRemoved(world, subject, currentEid))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tctx.entitiesWithRelations.delete(currentEid)\n\t\t}\n\n        for (const removeOperation of componentRemovalQueue) {\n            removeOperation()\n        }\n\n\t\tfor (const eid of removalQueue) {\n\t\t\tremoveEntity(world, eid)\n\t\t}\n\n\t\t// Remove entity from all queries\n\t\tfor (const query of ctx.queries) {\n\t\t\tqueryRemoveEntity(world, query, currentEid)\n\t\t}\n\n\t\t// Free the entity ID\n\t\tremoveEntityId(ctx.entityIndex, currentEid)\n\n\t\t// Remove all entity state from world\n\t\tctx.entityComponents.delete(currentEid)\n\n\t\t// Clear entity bitmasks\n\t\tfor (let i = 0; i < ctx.entityMasks.length; i++) {\n\t\t\tctx.entityMasks[i][currentEid] = 0\n\t\t}\n\t}\n}\n\n/**\n *  Returns an array of components that an entity possesses.\n *\n * @param {*} world\n * @param {*} eid\n */\nexport const getEntityComponents = (world: World, eid: EntityId): ComponentRef[] => {\n\tconst ctx = (world as InternalWorld)[$internal]\n\tif (eid === undefined) throw new Error(`getEntityComponents: entity id is undefined.`)\n\tif (!isEntityIdAlive(ctx.entityIndex, eid))\n\t\tthrow new Error(`getEntityComponents: entity ${eid} does not exist in the world.`)\n\treturn Array.from(ctx.entityComponents.get(eid)!)\n}\n\n/**\n * Checks the existence of an entity in a world\n *\n * @param {World} world\n * @param {number} eid\n */\nexport const entityExists = (world: World, eid: EntityId) => isEntityIdAlive((world as InternalWorld)[$internal].entityIndex, eid)\n", "type Func = (...args: any) => any\nexport const pipe = <T extends Func, U extends Func, R extends Func>\n    (...functions: [T, ...U[], R]): ((...args: Parameters<T>) => ReturnType<R>) => {\n    return (...args: Parameters<T>): ReturnType<R> => \n        functions.reduce((result, fn) => [fn(...result)], args as any)[0]\n}\n"],
  "mappings": "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",
  "names": ["core_exports", "__export", "$internal", "All", "And", "Any", "IsA", "None", "Not", "Or", "Pair", "Prefab", "Wildcard", "addComponent", "addComponents", "addEntity", "addPrefab", "commitRemovals", "createEntityIndex", "createRelation", "createWorld", "deleteWorld", "entityExists", "getAllEntities", "getComponentData", "getEntityComponents", "getId", "getRelationTargets", "getVersion", "getWorldComponents", "hasComponent", "innerQuery", "isRelation", "isWildcard", "observe", "onAdd", "onGet", "onRemove", "onSet", "pipe", "query", "registerComponent", "registerComponents", "registerQuery", "removeComponent", "removeComponents", "removeEntity", "removeQuery", "resetWorld", "set", "withAutoRemoveSubject", "withOnTargetRemoved", "withStore", "withVersioning", "__toCommonJS", "defineHiddenProperty", "obj", "key", "value", "getId", "index", "id", "getVersion", "incrementVersion", "newVersion", "withVersioning", "versionBits", "createEntityIndex", "options", "config", "versioning", "entityBits", "entityMask", "versionShift", "versionMask", "addEntityId", "recycledId", "entityId", "removeEntityId", "denseIndex", "lastIndex", "lastId", "newId", "isEntityIdAlive", "$internal", "createBaseWorld", "context", "entityIndex", "defineHiddenProperty", "createEntityIndex", "createWorld", "args", "arg", "resetWorld", "world", "ctx", "deleteWorld", "getWorldComponents", "getAllEntities", "createSparseSet", "dense", "sparse", "has", "val", "index", "swapped", "SharedArrayBufferOrArrayBuffer", "createUint32SparseSet", "initialCapacity", "length", "newDense", "createObservable", "observers", "observer", "entity", "args", "acc", "listener", "result", "$opType", "$opTerms", "Or", "components", "And", "Not", "Any", "All", "None", "onAdd", "terms", "onRemove", "onSet", "component", "onGet", "observe", "world", "hook", "callback", "ctx", "$internal", "type", "hash", "queryHash", "queryData", "registerQuery", "componentData", "registerComponent", "getComponentId", "termToString", "term", "sortedComponentIds", "a", "b", "options", "notComponents", "orComponents", "processComponents", "comps", "targetArray", "comp", "mapComponents", "allComponents", "sparseSet", "createUint32SparseSet", "createSparseSet", "toRemove", "generations", "v", "reduceBitflags", "c", "masks", "notMasks", "orMasks", "hasMasks", "addObservable", "createObservable", "removeObservable", "query", "entityIndex", "i", "eid", "hasComponent", "Prefab", "queryCheckEntity", "queryAddEntity", "innerQuery", "commitRemovals", "queryCheckEntity", "world", "query", "eid", "ctx", "$internal", "masks", "notMasks", "orMasks", "generations", "i", "generationId", "qMask", "qNotMask", "qOrMask", "eMask", "queryAddEntity", "query", "eid", "queryCommitRemovals", "i", "commitRemovals", "world", "ctx", "$internal", "queryRemoveEntity", "removeQuery", "terms", "hash", "queryHash", "$relation", "$pairTarget", "$isPairComponent", "$relationData", "createBaseRelation", "data", "relation", "target", "normalizedTarget", "Wildcard", "component", "defineHiddenProperty", "withStore", "createStore", "ctx", "makeExclusive", "withAutoRemoveSubject", "withOnTargetRemoved", "onRemove", "Pair", "relation", "target", "getRelationTargets", "world", "eid", "components", "getEntityComponents", "targets", "c", "$relation", "$pairTarget", "Wildcard", "isRelation", "createRelation", "args", "store", "exclusive", "autoRemoveSubject", "onTargetRemoved", "withStore", "makeExclusive", "withAutoRemoveSubject", "withOnTargetRemoved", "acc", "modifier", "createBaseRelation", "$wildcard", "createWildcardRelation", "getWildcard", "GLOBAL_WILDCARD", "createIsARelation", "getIsA", "GLOBAL_ISA", "IsA", "isWildcard", "component", "$relationData", "registerComponent", "world", "component", "ctx", "$internal", "queries", "data", "createObservable", "registerComponents", "components", "hasComponent", "eid", "registeredComponent", "generationId", "bitflag", "getComponentData", "componentData", "set", "recursivelyInherit", "baseEid", "inheritedEid", "visited", "addComponent", "IsA", "getEntityComponents", "Prefab", "parentEid", "getRelationTargets", "entityExists", "componentOrSet", "queryData", "queryCheckEntity", "queryAddEntity", "queryRemoveEntity", "$isPairComponent", "relation", "$relation", "target", "$pairTarget", "Pair", "Wildcard", "$relationData", "oldTarget", "removeComponent", "inheritedTargets", "inherited", "addComponents", "componentNode", "removeComponents", "Prefab", "addPrefab", "world", "eid", "addEntity", "addComponent", "ctx", "$internal", "addEntityId", "q", "queryCheckEntity", "queryAddEntity", "removeEntity", "isEntityIdAlive", "removalQueue", "processedEntities", "currentEid", "componentRemovalQueue", "subject", "innerQuery", "Wildcard", "entityExists", "component", "$isPairComponent", "relationData", "$relation", "$relationData", "removeComponent", "Pair", "$pairTarget", "removeOperation", "query", "queryRemoveEntity", "removeEntityId", "i", "getEntityComponents", "pipe", "functions", "args", "result", "fn"]
}
