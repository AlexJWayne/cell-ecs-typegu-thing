{
  "version": 3,
  "sources": ["../../src/legacy/index.ts", "../../src/serialization/ObserverSerializer.ts", "../../src/serialization/SoASerializer.ts", "../../src/legacy/serialization.ts"],
  "sourcesContent": ["import {\n  ComponentRef,\n  observe,\n  onAdd,\n  onRemove,\n  query,\n  EntityId,\n  addComponent as ecsAddComponent,\n  hasComponent as ecsHasComponent,\n  removeComponent as ecsRemoveComponent\n} from 'bitecs'\n\nexport interface IWorld { }\n\nexport type ComponentProp = TypedArray | Array<TypedArray>\n\nexport interface IComponentProp {\n}\n\nexport interface IComponent {\n}\n\nexport type Component = IComponent | ComponentType<ISchema>\n\nexport type QueryModifier = (c: IComponent[]) => IComponent | QueryModifier\n\nexport type Query<W extends IWorld = IWorld> = (world: W, clearDiff?: Boolean) => number[]\n\nexport const $modifier = Symbol(\"$modifier\")\n\nfunction modifier(c, mod) {\n  const inner = () => [c, mod]\n  inner[$modifier] = true\n  return inner\n}\n\nexport const Not = (c: Component | ISchema): QueryModifier => modifier(c, 'not')\nexport const Or = (c: Component | ISchema): QueryModifier => modifier(c, 'or')\nexport const Changed = (c: Component | ISchema): QueryModifier => modifier(c, 'changed')\n\nexport function defineQuery<W extends IWorld = IWorld>(components: (Component | QueryModifier)[]): Query<W> {\n  const queryFn = (world: IWorld) => query(world, components)\n  queryFn.components = components\n  return queryFn as unknown as Query<W>\n}\n\nexport function enterQuery<W extends IWorld = IWorld>(queryFn: Query<W>): Query<W> {\n  let queue: number[] = []\n  const initSet = new WeakSet<IWorld>()\n  return (world: W) => {\n    if (!initSet.has(world)) {\n      observe(world, onAdd(...(queryFn as any).components), (eid: EntityId) => queue.push(eid))\n      initSet.add(world)\n    }\n    const results = queue.slice()\n    queue.length = 0\n    return results\n  }\n}\n\nexport function exitQuery<W extends IWorld = IWorld>(queryFn: Query<W>): Query<W> {\n  let queue: number[] = []\n  const initSet = new WeakSet<IWorld>()\n  return (world: W) => {\n    if (!initSet.has(world)) {\n      observe(world, onRemove(...(queryFn as any).components), (eid: EntityId) => queue.push(eid))\n      initSet.add(world)\n    }\n    const results = queue.slice()\n    queue.length = 0\n    return results\n  }\n}\n\nexport const addComponent = (world: IWorld, component: ComponentRef, eid: EntityId) =>\n  ecsAddComponent(world, eid, component)\n\nexport const hasComponent = (world: IWorld, component: ComponentRef, eid: EntityId) =>\n  ecsHasComponent(world, eid, component)\n\nexport const removeComponent = (world: IWorld, component: ComponentRef, eid: EntityId) =>\n  ecsRemoveComponent(world, eid, component)\n\nexport interface ISchema {\n  [key: string]: Type | ListType | ISchema\n}\n\nexport type Type =\n  | 'i8'\n  | 'ui8'\n  | 'ui8c'\n  | 'i16'\n  | 'ui16'\n  | 'i32'\n  | 'ui32'\n  | 'f32'\n  | 'f64'\n  | 'eid'\n\nexport type ListType = readonly [Type, number];\n\nexport const Types = {\n  i8: 'i8' as Type,\n  ui8: 'ui8' as Type,\n  ui8c: 'ui8c' as Type,\n  i16: 'i16' as Type,\n  ui16: 'ui16' as Type,\n  i32: 'i32' as Type,\n  ui32: 'ui32' as Type,\n  f32: 'f32' as Type,\n  f64: 'f64' as Type,\n  eid: 'eid' as Type\n};\n\nexport type TypedArray =\n  | Uint8Array\n  | Int8Array\n  | Uint8ClampedArray\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Float32Array\n  | Float64Array\n\nexport type ArrayByType = {\n  'i8': Int8Array;\n  'ui8': Uint8Array;\n  'ui8c': Uint8ClampedArray;\n  'i16': Int16Array;\n  'ui16': Uint16Array;\n  'i32': Int32Array;\n  'ui32': Uint32Array;\n  'f32': Float32Array;\n  'f64': Float64Array;\n  'eid': Uint32Array;\n}\n\n// ... existing code ...\n\nconst arrayByTypeMap: { [key in Type]: any } = {\n  'i8': Int8Array,\n  'ui8': Uint8Array,\n  'ui8c': Uint8ClampedArray,\n  'i16': Int16Array,\n  'ui16': Uint16Array,\n  'i32': Int32Array,\n  'ui32': Uint32Array,\n  'f32': Float32Array,\n  'f64': Float64Array,\n  'eid': Uint32Array,\n};\n\nexport type ComponentType<T extends ISchema> = {\n  [key in keyof T]:\n  T[key] extends Type\n  ? ArrayByType[T[key]]\n  : T[key] extends [infer RT, number]\n  ? RT extends Type\n  ? Array<ArrayByType[RT]>\n  : unknown\n  : T[key] extends ISchema\n  ? ComponentType<T[key]>\n  : unknown;\n};\n\nexport const defineComponent = <T extends ISchema>(schema: T, max: number = 1e5): ComponentType<T> => {\n  const createSoA = <U extends ISchema>(schema: U, max: number): ComponentType<U> => {\n    const component = {} as ComponentType<U>\n    for (const key in schema) {\n      if (Array.isArray(schema[key])) {\n        const [type, length] = schema[key] as [Type, number]\n        component[key] = Array.from({ length }, () => new arrayByTypeMap[type](max)) as any\n      } else if (typeof schema[key] === 'object') {\n        component[key] = createSoA(schema[key] as ISchema, max) as any\n      } else {\n        const type = schema[key] as Type;\n        const TypeConstructor = arrayByTypeMap[type];\n        if (TypeConstructor) {\n          component[key] = new TypeConstructor(max) as any;\n        } else {\n          throw new Error(`Unsupported type: ${schema[key]}`);\n        }\n      }\n    }\n    return component\n  }\n  return createSoA(schema, max)\n}\n\nexport * from './serialization'", "import {\n    addComponent,\n    removeComponent,\n    addEntity,\n    removeEntity,\n    observe,\n    onAdd,\n    onRemove,\n    World,\n    ComponentRef,\n    entityExists,\n    isRelation,\n    getRelationTargets,\n    Wildcard,\n    EntityId\n} from 'bitecs'\n\nenum OperationType {\n    AddEntity = 0,\n    RemoveEntity = 1,\n    AddComponent = 2,\n    RemoveComponent = 3,\n    AddRelation = 4,\n    RemoveRelation = 5,\n}\nimport { $u8, $i8, $u16, $i16, $u32, $i32, $f32 } from './SoASerializer'\n\n/**\n * Serializes relation data for a specific entity\n */\nfunction serializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\n    if (!data) return offset\n    \n    // Handle array data (AoS) - defaults to f64\n    if (Array.isArray(data)) {\n        const value = data[eid]\n        if (value !== undefined) {\n            dataView.setFloat64(offset, value)\n            return offset + 8\n        }\n        return offset\n    }\n    \n    // Handle object data (SoA)\n    if (typeof data === 'object') {\n        const keys = Object.keys(data).sort()\n        for (const key of keys) {\n            const arr = data[key]\n            const value = arr[eid]\n            \n            if (value !== undefined) {\n                if (arr instanceof Int8Array || $i8 in arr) {\n                    dataView.setInt8(offset, value)\n                    offset += 1\n                } else if (arr instanceof Uint8Array || $u8 in arr) {\n                    dataView.setUint8(offset, value)\n                    offset += 1\n                } else if (arr instanceof Int16Array || $i16 in arr) {\n                    dataView.setInt16(offset, value)\n                    offset += 2\n                } else if (arr instanceof Uint16Array || $u16 in arr) {\n                    dataView.setUint16(offset, value)\n                    offset += 2\n                } else if (arr instanceof Int32Array || $i32 in arr) {\n                    dataView.setInt32(offset, value)\n                    offset += 4\n                } else if (arr instanceof Uint32Array || $u32 in arr) {\n                    dataView.setUint32(offset, value)\n                    offset += 4\n                } else if (arr instanceof Float32Array || $f32 in arr) {\n                    dataView.setFloat32(offset, value)\n                    offset += 4\n                } else {\n                    // Default to f64\n                    dataView.setFloat64(offset, value)\n                    offset += 8\n                }\n            }\n        }\n    }\n    \n    return offset\n}\n\n/**\n * Deserializes relation data for a specific entity\n */\nfunction deserializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\n    if (!data) return offset\n    \n    // Handle array data (AoS) - defaults to f64\n    if (Array.isArray(data)) {\n        data[eid] = dataView.getFloat64(offset)\n        return offset + 8\n    }\n    \n    // Handle object data (SoA)\n    if (typeof data === 'object') {\n        const keys = Object.keys(data).sort()\n        for (const key of keys) {\n            const arr = data[key]\n            \n            if (arr instanceof Int8Array || $i8 in arr) {\n                arr[eid] = dataView.getInt8(offset)\n                offset += 1\n            } else if (arr instanceof Uint8Array || $u8 in arr) {\n                arr[eid] = dataView.getUint8(offset)\n                offset += 1\n            } else if (arr instanceof Int16Array || $i16 in arr) {\n                arr[eid] = dataView.getInt16(offset)\n                offset += 2\n            } else if (arr instanceof Uint16Array || $u16 in arr) {\n                arr[eid] = dataView.getUint16(offset)\n                offset += 2\n            } else if (arr instanceof Int32Array || $i32 in arr) {\n                arr[eid] = dataView.getInt32(offset)\n                offset += 4\n            } else if (arr instanceof Uint32Array || $u32 in arr) {\n                arr[eid] = dataView.getUint32(offset)\n                offset += 4\n            } else if (arr instanceof Float32Array || $f32 in arr) {\n                arr[eid] = dataView.getFloat32(offset)\n                offset += 4\n            } else {\n                // Default to f64\n                arr[eid] = dataView.getFloat64(offset)\n                offset += 8\n            }\n        }\n    }\n    \n    return offset\n}\n\n/**\n * Creates a serializer for observing and serializing changes in networked entities.\n */\nexport const createObserverSerializer = (world: World, networkedTag: ComponentRef, components: ComponentRef[], buffer = new ArrayBuffer(1024 * 1024 * 100)) => {\n    const dataView = new DataView(buffer)\n    let offset = 0\n    const queue: [number, OperationType, number, number?, any?][] = []\n    const relationTargets = new Map<number, Map<number, Set<number>>>()\n    \n    observe(world, onAdd(networkedTag), (eid: EntityId) => {\n        queue.push([eid, OperationType.AddEntity, -1])\n    })\n\n    observe(world, onRemove(networkedTag), (eid: EntityId) => {\n        queue.push([eid, OperationType.RemoveEntity, -1])\n        relationTargets.delete(eid)\n    })\n\n    components.forEach((component, i) => {\n        if (isRelation(component)) {\n            observe(world, onAdd(networkedTag, component(Wildcard)), (eid: EntityId) => {\n                const targets = getRelationTargets(world, eid, component)\n                for (const target of targets) {\n                    if (!relationTargets.has(eid)) {\n                        relationTargets.set(eid, new Map())\n                    }\n                    if (!relationTargets.get(eid).has(i)) {\n                        relationTargets.get(eid).set(i, new Set())\n                    }\n                    relationTargets.get(eid).get(i).add(target)\n                    const relationData = component(target)\n                    queue.push([eid, OperationType.AddRelation, i, target, relationData])\n                }\n            })\n\n            observe(world, onRemove(networkedTag, component(Wildcard)), (eid: EntityId) => {\n                const targetMap = relationTargets.get(eid)\n                if (targetMap) {\n                    const targets = targetMap.get(i)\n                    if (targets) {\n                        for (const target of targets) {\n                            queue.push([eid, OperationType.RemoveRelation, i, target])\n                        }\n                        targetMap.delete(i)\n                        if (targetMap.size === 0) {\n                            relationTargets.delete(eid)\n                        }\n                    }\n                }\n            })\n        } else {\n            observe(world, onAdd(networkedTag, component), (eid: EntityId) => {\n                queue.push([eid, OperationType.AddComponent, i])\n            })\n\n            observe(world, onRemove(networkedTag, component), (eid: EntityId) => {\n                queue.push([eid, OperationType.RemoveComponent, i])\n            })\n        }\n    })\n    \n    return () => {\n        offset = 0\n        \n        for (let i = 0; i < queue.length; i++) {\n            const [entityId, type, componentId, targetId, relationData] = queue[i]\n            dataView.setUint32(offset, entityId)\n            offset += 4\n            dataView.setUint8(offset, type)\n            offset += 1\n            if (type === OperationType.AddComponent || \n                type === OperationType.RemoveComponent || \n                type === OperationType.AddRelation ||\n                type === OperationType.RemoveRelation) {\n                dataView.setUint8(offset, componentId)\n                offset += 1\n                \n                if (type === OperationType.AddRelation || type === OperationType.RemoveRelation) {\n                    dataView.setUint32(offset, targetId)\n                    offset += 4\n                    \n                    if (type === OperationType.AddRelation && relationData) {\n                        offset = serializeRelationData(relationData, entityId, dataView, offset)\n                    }\n                }\n            }\n        }\n        queue.length = 0\n\n        return buffer.slice(0, offset)\n    }\n}\n\n/**\n * Creates a deserializer for applying serialized changes to a world.\n */\nexport const createObserverDeserializer = (world: World, networkedTag: ComponentRef, components: ComponentRef[], constructorMapping?: Map<number, number>) => {\n    let entityIdMapping = constructorMapping || new Map<number, number>()\n    \n    return (packet: ArrayBuffer, overrideMapping?: Map<number, number>) => {\n        // Allow overriding the mapping for this call\n        const currentMapping = overrideMapping || entityIdMapping\n        const dataView = new DataView(packet)\n        let offset = 0\n\n        while (offset < packet.byteLength) {\n            const packetEntityId = dataView.getUint32(offset)\n            offset += 4\n            const operationType = dataView.getUint8(offset)\n            offset += 1\n            let componentId = -1\n            let targetId = -1\n            \n            if (operationType === OperationType.AddComponent || \n                operationType === OperationType.RemoveComponent ||\n                operationType === OperationType.AddRelation ||\n                operationType === OperationType.RemoveRelation) {\n                componentId = dataView.getUint8(offset)\n                offset += 1\n                \n                if (operationType === OperationType.AddRelation || operationType === OperationType.RemoveRelation) {\n                    targetId = dataView.getUint32(offset)\n                    offset += 4\n                }\n            }\n\n            const component = components[componentId]\n            let worldEntityId = currentMapping.get(packetEntityId)\n\n            if (operationType === OperationType.AddEntity) {\n                if (worldEntityId === undefined) {\n                    worldEntityId = addEntity(world)\n                    currentMapping.set(packetEntityId, worldEntityId)\n                    addComponent(world, worldEntityId, networkedTag)\n                } else {\n                    // TODO: figure out if this should ignore, throw, warn, or if the observer serializer should maybe do a snapshot on first call?\n                    // throw new Error(`Entity with ID ${packetEntityId} already exists in the mapping.`)\n                    console.warn(`Attempted to deserialize addEntity with ID ${packetEntityId}, but it has already been deserialzied and exists in the mapping.`)\n                }\n            } else if (worldEntityId !== undefined && entityExists(world, worldEntityId)) {\n                if (operationType === OperationType.RemoveEntity) {\n                    removeEntity(world, worldEntityId)\n                    currentMapping.delete(packetEntityId)\n                } else if (operationType === OperationType.AddComponent) {\n                    addComponent(world, worldEntityId, component)\n                } else if (operationType === OperationType.RemoveComponent) {\n                    removeComponent(world, worldEntityId, component)\n                } else if (operationType === OperationType.AddRelation) {\n                    const worldTargetId = currentMapping.get(targetId)\n                    if (worldTargetId !== undefined) {\n                        const relationComponent = component(worldTargetId)\n                        addComponent(world, worldEntityId, relationComponent)\n                        offset = deserializeRelationData(relationComponent, worldEntityId, dataView, offset)\n                    }\n                } else if (operationType === OperationType.RemoveRelation) {\n                    const worldTargetId = currentMapping.get(targetId)\n                    if (worldTargetId !== undefined) {\n                        removeComponent(world, worldEntityId, component(worldTargetId))\n                    }\n                }\n            }\n        }\n\n        return currentMapping\n    }\n}\n", "\n/**\n * Symbols representing different data types for serialization.\n */\nexport const $u8 = Symbol.for('bitecs-u8'), $i8 = Symbol.for('bitecs-i8'), $u16 = Symbol.for('bitecs-u16'), $i16 = Symbol.for('bitecs-i16'),\n    $u32 = Symbol.for('bitecs-u32'), $i32 = Symbol.for('bitecs-i32'), $f32 = Symbol.for('bitecs-f32'), $f64 = Symbol.for('bitecs-f64')\n\n/**\n * Union type of all possible TypedArray types.\n */\nexport type TypedArray = \n    | Int8Array\n    | Uint8Array\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Float32Array\n    | Float64Array\n\n/**\n * Union type of all possible type symbols.\n */\nexport type TypeSymbol = typeof $u8 | typeof $i8 | typeof $u16 | typeof $i16 | typeof $u32 | typeof $i32 | typeof $f32 | typeof $f64\n\n/**\n * Type representing a primitive brand, which is either a number array with a symbol property or a TypedArray.\n */\nexport type PrimitiveBrand = (number[] & { [key: symbol]: true }) | TypedArray\n\n/**\n * Type representing a component reference, which is a record mapping string keys to either\n * a PrimitiveBrand (number array with type symbol) or TypedArray values.\n * Used to define the structure of components that can be serialized.\n */\ntype ComponentRef = Record<string, PrimitiveBrand | TypedArray>\n\n/**\n * Creates a function that tags an array with a type symbol for serialization.\n * @param {TypeSymbol} symbol - The type symbol to tag the array with.\n * @returns {Function} A function that tags an array with the given type symbol.\n */\nconst typeTagForSerialization = (symbol: TypeSymbol) => (a: number[] = []): PrimitiveBrand => \n    Object.defineProperty(a, symbol, { value: true, enumerable: false, writable: false, configurable: false }) as PrimitiveBrand\n\n/**\n * Functions to create arrays tagged with specific type symbols.\n */\nexport const u8 = typeTagForSerialization($u8),     i8 = typeTagForSerialization($i8),\n            u16 = typeTagForSerialization($u16),    i16 = typeTagForSerialization($i16),\n            u32 = typeTagForSerialization($u32),    i32 = typeTagForSerialization($i32),\n            f32 = typeTagForSerialization($f32),    f64 = typeTagForSerialization($f64)\n\n/**\n * Object containing setter functions for each data type.\n */\nconst typeSetters = {\n    [$u8]: (view: DataView, offset: number, value: number) => { view.setUint8(offset, value); return 1; },\n    [$i8]: (view: DataView, offset: number, value: number) => { view.setInt8(offset, value); return 1; },\n    [$u16]: (view: DataView, offset: number, value: number) => { view.setUint16(offset, value); return 2; },\n    [$i16]: (view: DataView, offset: number, value: number) => { view.setInt16(offset, value); return 2; },\n    [$u32]: (view: DataView, offset: number, value: number) => { view.setUint32(offset, value); return 4; },\n    [$i32]: (view: DataView, offset: number, value: number) => { view.setInt32(offset, value); return 4; },\n    [$f32]: (view: DataView, offset: number, value: number) => { view.setFloat32(offset, value); return 4; },\n    [$f64]: (view: DataView, offset: number, value: number) => { view.setFloat64(offset, value); return 8; }\n}\n\n/**\n * Object containing getter functions for each data type.\n */\nconst typeGetters = {\n    [$u8]: (view: DataView, offset: number) => ({ value: view.getUint8(offset), size: 1 }),\n    [$i8]: (view: DataView, offset: number) => ({ value: view.getInt8(offset), size: 1 }),\n    [$u16]: (view: DataView, offset: number) => ({ value: view.getUint16(offset), size: 2 }),\n    [$i16]: (view: DataView, offset: number) => ({ value: view.getInt16(offset), size: 2 }),\n    [$u32]: (view: DataView, offset: number) => ({ value: view.getUint32(offset), size: 4 }),\n    [$i32]: (view: DataView, offset: number) => ({ value: view.getInt32(offset), size: 4 }),\n    [$f32]: (view: DataView, offset: number) => ({ value: view.getFloat32(offset), size: 4 }),\n    [$f64]: (view: DataView, offset: number) => ({ value: view.getFloat64(offset), size: 8 })\n}\n\n/**\n * Checks if a value is a TypedArray or branded array\n */\nfunction isTypedArrayOrBranded(arr: any): arr is PrimitiveBrand | TypedArray {\n    return arr && (\n        ArrayBuffer.isView(arr) || \n        (Array.isArray(arr) && typeof arr === 'object')\n    )\n}\n\n/**\n * Gets the type symbol for an array\n */\nfunction getTypeForArray(arr: PrimitiveBrand | TypedArray): TypeSymbol {\n    // Check for branded arrays first\n    for (const symbol of [$u8, $i8, $u16, $i16, $u32, $i32, $f32, $f64] as TypeSymbol[]) {\n        if (symbol in arr) return symbol\n    }\n    // Then check TypedArrays\n    if (arr instanceof Int8Array) return $i8\n    if (arr instanceof Uint8Array) return $u8\n    if (arr instanceof Int16Array) return $i16\n    if (arr instanceof Uint16Array) return $u16\n    if (arr instanceof Int32Array) return $i32\n    if (arr instanceof Uint32Array) return $u32\n    if (arr instanceof Float32Array) return $f32\n    return $f64\n}\n\n/**\n * Creates a serializer function for a component.\n * @param {ComponentRef} component - The component to create a serializer for.\n * @returns {Function} A function that serializes the component.\n */\nexport const createComponentSerializer = (component: ComponentRef | PrimitiveBrand | TypedArray) => {\n    // Handle direct array case\n    if (isTypedArrayOrBranded(component)) {\n        const type = getTypeForArray(component)\n        const setter = typeSetters[type]\n        return (view: DataView, offset: number, index: number) => {\n            let bytesWritten = 0\n            bytesWritten += typeSetters[$u32](view, offset, index)\n            bytesWritten += setter(view, offset + bytesWritten, component[index])\n            return bytesWritten\n        }\n    }\n\n    // Handle component case\n    const props = Object.keys(component)\n    const types = props.map(prop => {\n        const arr = component[prop]\n        if (!isTypedArrayOrBranded(arr)) {\n            throw new Error(`Invalid array type for property ${prop}`)\n        }\n        return getTypeForArray(arr)\n    })\n    const setters = types.map(type => typeSetters[type as keyof typeof typeSetters] || (() => { throw new Error(`Unsupported or unannotated type`); }))\n    return (view: DataView, offset: number, index: number) => {\n        let bytesWritten = 0\n        // Write index first\n        bytesWritten += typeSetters[$u32](view, offset + bytesWritten, index)\n        for (let i = 0; i < props.length; i++) {\n            bytesWritten += setters[i](view, offset + bytesWritten, component[props[i]][index])\n        }\n        return bytesWritten\n    }\n}\n\n/**\n * Creates a deserializer function for a component.\n * @param {ComponentRef} component - The component to create a deserializer for.\n * @returns {Function} A function that deserializes the component.\n */\nexport const createComponentDeserializer = (component: ComponentRef | PrimitiveBrand | TypedArray) => {\n    // Handle direct array case\n    if (isTypedArrayOrBranded(component)) {\n        const type = getTypeForArray(component)\n        const getter = typeGetters[type]\n        return (view: DataView, offset: number, entityIdMapping?: Map<number, number>) => {\n            let bytesRead = 0\n            const { value: originalIndex, size: indexSize } = typeGetters[$u32](view, offset)\n            bytesRead += indexSize\n            const index = entityIdMapping ? entityIdMapping.get(originalIndex) ?? originalIndex : originalIndex\n            const { value, size } = getter(view, offset + bytesRead)\n            component[index] = value\n            return bytesRead + size\n        }\n    }\n\n    // Handle component case\n    const props = Object.keys(component)\n    const types = props.map(prop => {\n        const arr = component[prop]\n        if (!isTypedArrayOrBranded(arr)) {\n            throw new Error(`Invalid array type for property ${prop}`)\n        }\n        return getTypeForArray(arr)\n    })\n    const getters = types.map(type => typeGetters[type as keyof typeof typeGetters] || (() => { throw new Error(`Unsupported or unannotated type`); }))\n    return (view: DataView, offset: number, entityIdMapping?: Map<number, number>) => {\n        let bytesRead = 0\n\n        const { value: originalIndex, size: indexSize } = typeGetters[$u32](view, offset + bytesRead)\n        bytesRead += indexSize\n        \n        const index = entityIdMapping ? entityIdMapping.get(originalIndex) ?? originalIndex : originalIndex\n        \n        for (let i = 0; i < props.length; i++) {\n            const { value, size } = getters[i](view, offset + bytesRead)\n            component[props[i]][index] = value\n            bytesRead += size\n        }\n        return bytesRead\n    }\n}\n\n/**\n * Creates a serializer function for Structure of Arrays (SoA) data.\n * @param {ComponentRef[]} components - The components to serialize.\n * @param {ArrayBuffer} [buffer] - The buffer to use for serialization.\n * @returns {Function} A function that serializes the SoA data.\n */\nexport const createSoASerializer = (components: (ComponentRef | PrimitiveBrand | TypedArray)[], buffer: ArrayBuffer = new ArrayBuffer(1024 * 1024 * 100)) => {\n    const view = new DataView(buffer)\n    const componentSerializers = components.map(createComponentSerializer)\n    return (indices: number[] | readonly number[]): ArrayBuffer => {\n        let offset = 0\n        for (let i = 0; i < indices.length; i++) {\n            const index = indices[i]\n            for (let j = 0; j < componentSerializers.length; j++) {\n                offset += componentSerializers[j](view, offset, index)\n            }\n        }\n        return buffer.slice(0, offset)\n    }\n}\n\n/**\n * Creates a deserializer function for Structure of Arrays (SoA) data.\n * @param {ComponentRef[]} components - The components to deserialize.\n * @returns {Function} A function that deserializes the SoA data.\n */\nexport const createSoADeserializer = (components: (ComponentRef | PrimitiveBrand | TypedArray)[]) => {\n    const componentDeserializers = components.map(createComponentDeserializer)\n    return (packet: ArrayBuffer, entityIdMapping?: Map<number, number>): void => {\n        const view = new DataView(packet)\n        let offset = 0\n        while (offset < packet.byteLength) {\n            for (let i = 0; i < componentDeserializers.length; i++) {\n                offset += componentDeserializers[i](view, offset, entityIdMapping)\n            }\n        }\n    }\n}\n", "\nimport { createObserverSerializer, createObserverDeserializer } from '../serialization/ObserverSerializer'\nimport { createSoASerializer, createSoADeserializer } from '../serialization/SoASerializer'\nimport { IWorld, Component, IComponentProp } from './index'\n\nexport type Serializer<W extends IWorld = IWorld> = (world: W, ents: number[]) => ArrayBuffer\nexport type Deserializer<W extends IWorld = IWorld> = (world: W, packet: ArrayBuffer, mode?: DESERIALIZE_MODE) => number[]\n\nexport function defineSerializer<W extends IWorld = IWorld>(components: Component[] | IComponentProp[], maxBytes?: number): Serializer<W> {\n  const initSet = new WeakSet<W>();\n  let serializeObservations: () => ArrayBuffer, serializeData: (indices: number[]) => ArrayBuffer;\n  return (world: W, ents: number[]) => {\n    if (!initSet.has(world)) {\n      initSet.add(world);\n      serializeObservations = createObserverSerializer(world, components[0], components);\n      serializeData = createSoASerializer(components as Component[]);\n    }\n    const observerData = serializeObservations();\n    const soaData = serializeData(ents);\n    // Combine observer and soa data into a single ArrayBuffer\n    const combinedData = new ArrayBuffer(observerData.byteLength + soaData.byteLength);\n    const combinedView = new Uint8Array(combinedData);\n    combinedView.set(new Uint8Array(observerData), 0);\n    combinedView.set(new Uint8Array(soaData), observerData.byteLength);\n    return combinedData;\n  }\n}\n\nexport function defineDeserializer<W extends IWorld = IWorld>(components: Component[] | IComponentProp[]): Deserializer<W> {\n  const initSet = new WeakSet<W>();\n  let deserializeObservations: any, deserializeData: any\n  return (world: W, packet: ArrayBuffer, mode: any): number[] => {\n    if (!initSet.has(world)) {\n      initSet.add(world);\n      deserializeObservations = createObserverDeserializer(world, components[0], components);\n      deserializeData = createSoADeserializer(components);\n    }\n    const observerDataLength = deserializeObservations(packet, mode);\n    const soaData = packet.slice(observerDataLength);\n    return deserializeData(soaData, mode);\n  }\n}\n\nexport enum DESERIALIZE_MODE {\n    REPLACE,\n    APPEND,\n    MAP\n}"],
  "mappings": "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",
  "names": ["observe", "onAdd", "onRemove", "query", "ecsAddComponent", "ecsHasComponent", "ecsRemoveComponent", "addComponent", "removeComponent", "addEntity", "removeEntity", "observe", "onAdd", "onRemove", "entityExists", "isRelation", "getRelationTargets", "Wildcard", "$u8", "$i8", "$u16", "$i16", "$u32", "$i32", "$f32", "$f64", "typeTagForSerialization", "symbol", "a", "u8", "i8", "u16", "i16", "u32", "i32", "f32", "f64", "typeSetters", "view", "offset", "value", "typeGetters", "isTypedArrayOrBranded", "arr", "getTypeForArray", "createComponentSerializer", "component", "type", "setter", "index", "bytesWritten", "props", "setters", "prop", "i", "createComponentDeserializer", "getter", "entityIdMapping", "bytesRead", "originalIndex", "indexSize", "size", "getters", "createSoASerializer", "components", "buffer", "componentSerializers", "indices", "j", "createSoADeserializer", "componentDeserializers", "packet", "serializeRelationData", "data", "eid", "dataView", "offset", "value", "keys", "key", "arr", "$i8", "$u8", "$i16", "$u16", "$i32", "$u32", "$f32", "deserializeRelationData", "createObserverSerializer", "world", "networkedTag", "components", "buffer", "queue", "relationTargets", "observe", "onAdd", "onRemove", "component", "i", "isRelation", "Wildcard", "targets", "getRelationTargets", "target", "relationData", "targetMap", "entityId", "type", "componentId", "targetId", "createObserverDeserializer", "constructorMapping", "entityIdMapping", "packet", "overrideMapping", "currentMapping", "packetEntityId", "operationType", "worldEntityId", "addEntity", "addComponent", "entityExists", "removeEntity", "removeComponent", "worldTargetId", "relationComponent", "defineSerializer", "components", "maxBytes", "initSet", "serializeObservations", "serializeData", "world", "ents", "createObserverSerializer", "createSoASerializer", "observerData", "soaData", "combinedData", "combinedView", "defineDeserializer", "deserializeObservations", "deserializeData", "packet", "mode", "createObserverDeserializer", "createSoADeserializer", "observerDataLength", "DESERIALIZE_MODE", "$modifier", "modifier", "c", "mod", "inner", "Not", "Or", "Changed", "defineQuery", "components", "queryFn", "world", "query", "enterQuery", "queue", "initSet", "observe", "onAdd", "eid", "results", "exitQuery", "onRemove", "addComponent", "component", "ecsAddComponent", "hasComponent", "ecsHasComponent", "removeComponent", "ecsRemoveComponent", "Types", "arrayByTypeMap", "defineComponent", "schema", "max", "createSoA", "key", "type", "length", "TypeConstructor"]
}
